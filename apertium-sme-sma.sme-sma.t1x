<?xml version="1.0" encoding="UTF-8"?>

<!--

t1x local chunking NP, VP
t2x localcoordination NP+NP, etc.
t3x empty, but for adpositional phrases + Rel clauses
t4x Constituent mvm, SVO -> SOV
t5x Cleanup


This is the first pass. Responsibilities of this file include:

Chunking words to phrases.

Some important macros are defined here (to be documented):

convert-deriv1		   =
proc-syn-foc-qst1	   =
proc-syn-foc-qst2	   =
proc-syn-foc-qst3	   =
convert-case-nbr-poss1 =
convert-case-nbr-poss2 =
convert-case-nbr-poss3 =
convert-compounds1	   =
convert-compounds2	   =
convert-compounds3	   =
convert-verb-deriv1	   =

While awaiting documentation, here is a list of the REGLA rules:

Section: Nominal groups:
Rules: pron-pers, pron-refl, pron-rel, pron-dem, pron-indef,
       num, n-cmp n-cmp n-cmp n, n-cmp n-cmp n, n-cmp n, n,
       adj-rdep n, n num-ldep, n-prop-pers, pron-attr n-cmp n,
       pron-attr pron-attr n, pron-attr n

Section: Verbal groups:
Rules: ii, conneg, ii conneg, verb-fin, leat-fin verb-prfprc,
       leat-fin adv verb-prfprc, verb-inf, verb-prfprc, verb-actio,
       verb-imp

Section: Adjective groups:
Rules:  adj

Section: Adverbial groups:
Rules:  adv

Section: Adpositions
Rules: pr, post, cs, cc

Section: Miscellaneous:
Rules: sent


DEF-CAT NAMING SCHEME:
                       lemma-pos.tag.tag_SYNTAG

where the SYNTAG part may have an l or r before or after to signify the arrow
(where l corresponds to ← and r to →);
alternatively the SYNTAG part is something like "mod", "attr" or "head".
And then there are some categories like "month", with all the months.


-->


<!-- -*- nxml -*- -->
<transfer default="chunk">
  <section-def-cats>
    <def-cat n="n-cmp">
      <cat-item tags="n.cmp"/>
      <cat-item tags="n.*.*.cmp.guio"/>
      <cat-item tags="n.*.*.*.cmp.guio"/>
      <cat-item tags="n.*.cmp"/>
      <cat-item tags="n.*.*.cmp"/>
      <cat-item tags="n.*.*.*.cmp"/>
      <cat-item tags="adj.*.cmp"/>
      <cat-item tags="vblex.*.der_nomact.n.*.cmp"/>
      <cat-item tags="vblex.*.der_nomag.n.*.cmp"/>
    </def-cat>
    <def-cat n="prfprcword">
      <cat-item tags="*.prfprc.*"/>
      <cat-item tags="n.*"/>
      <cat-item tags="adv.*"/>
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="nominative">
      <cat-item tags="n.@←SPRED"/>
    </def-cat>
    <def-cat n="n">
      <cat-item tags="n.*"/>
      <cat-item tags="np.*"/>
      <cat-item tags="vblex.*.der_nomact.n.*"/>
      <cat-item tags="vblex.*.der_nomag.n.*"/>
      <cat-item tags="adj.der_vuota.n.*"/>
    </def-cat>
    <def-cat n="verb_to_adv">
      <cat-item lemma="oassálastit" tags="vblex.*"/>
      <cat-item lemma="oasálastit" tags="vblex.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="adj-rdep">
      <cat-item tags="adj.*.@→N"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="num.*"/>
    </def-cat>
    <def-cat n="num-ldep">
      <cat-item tags="num.*.*.*.@N←"/>
    </def-cat>
    <def-cat n="prn-res">
      <cat-item tags="prn.res.*"/>
    </def-cat>
    <def-cat n="prn-refl">
      <cat-item tags="prn.ref.*"/>
    </def-cat>
    <def-cat n="prn-rel">
      <cat-item tags="prn.rel.*"/>
    </def-cat>
    <def-cat n="prn-dem">
      <cat-item tags="prn.dem.*"/>
    </def-cat>
    <def-cat n="prn-itg">
      <cat-item tags="prn.itg.*"/>
    </def-cat>
    <def-cat n="prn-indef">
      <cat-item tags="prn.ind.*"/>
    </def-cat>
    <def-cat n="prn-attr">
      <cat-item tags="prn.ind.attr"/>
      <cat-item tags="prn.ind.attr.*"/>
      <cat-item tags="prn.itg.attr.*"/>
    </def-cat>
    <def-cat n="verb-actio">
      <cat-item tags="vblex.*.actio.*"/>
    </def-cat>
    <def-cat n="prn-pers">
      <cat-item tags="prn.pers.*"/>
    </def-cat>
    <def-cat n="n-prop-pers">
      <cat-item tags="np.ant.*"/>
    </def-cat>
    <def-cat n="verb-imp">
      <cat-item tags="vblex.*.imp.*"/>
    </def-cat>
    <def-cat n="verb-inf">
      <cat-item tags="vblex.*.inf.*"/>
      <cat-item tags="vblex.*.der_l.v.inf.*"/>
      <cat-item tags="vblex.*.der_d.v.inf.*"/>
      <cat-item tags="vblex.*.der_caus.v.inf.*"/>
      <cat-item tags="vblex.*.der_caus.v.*.inf.*"/>
      <cat-item tags="vblex.*.der_inchl.v.inf.*"/>
    </def-cat>
    <def-cat n="verb-prfprc">
      <cat-item tags="vblex.*.prfprc.*"/>
      <cat-item tags="vblex.*.der_inchl.v.prfprc.*"/>
      <cat-item tags="vblex.*.der_inchl.v.prfprc"/>
    </def-cat>
    <def-cat n="leat-aux">
      <cat-item lemma="leat" tags="*.@+FAUXV"/>
      <cat-item lemma="leat" tags="*.@-FAUXV"/>
    </def-cat>
    <def-cat n="leat-main">
      <cat-item lemma="leat" tags="*.@+FMAINV"/>
      <cat-item lemma="leat" tags="*.@-FMAINV"/>
    </def-cat>
    <def-cat n="ii">
      <cat-item lemma="ii" tags="vblex.iv.neg.*"/>
    </def-cat>
    <def-cat n="conneg">
      <cat-item tags="vblex.*.conneg.*"/>
      <cat-item tags="vblex.*.*.*.conneg.*"/>
    </def-cat>
    <def-cat n="verb-fin">
      <cat-item tags="vblex.*.indic.*"/>
      <cat-item tags="vblex.*.cond.*"/>
      <cat-item tags="vblex.*.pot.*"/>
      <cat-item tags="vblex.*.der_inchl.vblex.indic.*"/>
      <cat-item tags="vblex.*.der_inchl.vblex.cond.*"/>
      <cat-item tags="vblex.*.der_inchl.vblex.pot.*"/>
    </def-cat>
    <def-cat n="cnjcoo">
      <cat-item tags="cnjcoo"/>
      <cat-item tags="cnjcoo.*"/>
    </def-cat>
    <def-cat n="cnjsub">
      <cat-item tags="cnjsub"/>
      <cat-item tags="cnjsub.*"/>
    </def-cat>
    <def-cat n="pr">
      <cat-item tags="pr"/>
      <cat-item tags="pr.*"/>
    </def-cat>
    <def-cat n="post">
      <cat-item tags="post"/>
      <cat-item tags="post.*"/>
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="adv"/>
      <cat-item tags="adv.*"/>
      <cat-item tags="pcle"/>
      <cat-item tags="pcle.*"/>
      <cat-item tags="adj.der_at.adv"/>
      <cat-item tags="adj.der_at.adv.*"/>
      <cat-item tags="vblex.*.ger"/>
      <cat-item tags="vblex.*.ger.*"/>
      <cat-item tags="vblex.*.vgen"/>
      <cat-item tags="vblex.*.vgen.*"/>
      <cat-item tags="vblex.*.vabess"/>
      <cat-item tags="vblex.*.vabess.*"/>
    </def-cat>
    <def-cat n="sent">
      <cat-item tags="clb"/>
      <cat-item tags="clb.*"/>
    </def-cat>
  </section-def-cats>
  <section-def-attrs>
    <def-attr n="a_cmp">
      <attr-item tags="sgcmp"/>
      <attr-item tags="sgnomcmp"/>
      <attr-item tags="attr"/>
      <attr-item tags="sggencmp"/>
      <attr-item tags="plgencmp"/>
    </def-attr>

    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="vblex.iv.der_nomag.n"/>
      <attr-item tags="vblex.tv.der_nomag.n"/>
      <attr-item tags="vblex.iv.der_nomact.n"/>
      <attr-item tags="vblex.tv.der_nomact.n"/>
      <attr-item tags="adj.der_vuota.n"/>
    </def-attr>

    <def-attr n="a_pron">
       <attr-item tags="prn.ind"/>
       <attr-item tags="prn.dem"/>
       <attr-item tags="prn.ref"/>
       <attr-item tags="prn.rel"/>
       <attr-item tags="prn.itg"/>
    </def-attr>

    <def-attr n="a_case">
       <attr-item tags="nom"/>
       <attr-item tags="acc"/>
       <attr-item tags="gen"/>
       <attr-item tags="com"/>
       <attr-item tags="ess"/>
       <attr-item tags="ill"/>
       <attr-item tags="loc"/>
       <attr-item tags="ine"/>
       <attr-item tags="ela"/>
       <attr-item tags="CD"/>
    </def-attr>

    <def-attr n="a_attr">
       <attr-item tags="attr"/>
    </def-attr>

    <def-attr n="a_adj">
       <attr-item tags="adj"/>
       <attr-item tags="adj.ord"/>
       <attr-item tags="n"/>
    </def-attr>

    <def-attr n="a_verb">
       <attr-item tags="vblex"/>
       <attr-item tags="vblex.iv.der_inchl.v"/>
       <attr-item tags="vblex.tv.der_inchl.v"/>
    </def-attr>

    <def-attr n="a_trans">
       <attr-item tags="iv"/>
       <attr-item tags="tv"/>
    </def-attr>

    <def-attr n="a_qst">
       <attr-item tags="qst"/>
    </def-attr>

    <def-attr n="a_neg">
       <attr-item tags="neg"/>
    </def-attr>

    <def-attr n="a_indecl">
       <attr-item tags="indecl"/>
    </def-attr>

    <def-attr n="a_conneg">
       <attr-item tags="conneg"/>
    </def-attr>

    <def-attr n="a_allegro">
       <attr-item tags="allegro"/>
    </def-attr>

    <def-attr n="a_mood">
       <attr-item tags="pot"/>
       <attr-item tags="indic"/>
       <attr-item tags="cond"/>
       <attr-item tags="imp"/>
    </def-attr>

    <def-attr n="a_nbr">
       <attr-item tags="sg"/>
       <attr-item tags="pl"/>
       <attr-item tags="du"/>
       <attr-item tags="ND"/>
    </def-attr>

    <def-attr n="a_tense">
       <attr-item tags="pret"/>
       <attr-item tags="pres"/>
    </def-attr>

    <def-attr n="a_poss">
       <attr-item tags="px1sg"/>
       <attr-item tags="px2sg"/>
       <attr-item tags="px3sg"/>
       <attr-item tags="px1du"/>
       <attr-item tags="px2du"/>
       <attr-item tags="px3du"/>
       <attr-item tags="px1pl"/>
       <attr-item tags="px2pl"/>
       <attr-item tags="px3pl"/>
    </def-attr>


    <def-attr n="a_pers">
       <attr-item tags="p1"/>
       <attr-item tags="p2"/>
       <attr-item tags="p3"/>
    </def-attr>

    <def-attr n="a_degr">
       <attr-item tags="comp"/>
       <attr-item tags="superl"/>
    </def-attr>

    <def-attr n="a_deriv">
       <attr-item tags="der_at"/>
       <attr-item tags="der_laakan"/>
       <attr-item tags="der_l"/>
       <attr-item tags="der_caus"/>
       <attr-item tags="der_ahtje"/>
       <attr-item tags="der_d"/>
       <attr-item tags="der_st"/>
	   
    </def-attr>

    <def-attr n="a_foc">
      <attr-item tags="foc_ba"/>
      <attr-item tags="foc_ban"/>
      <attr-item tags="foc_bason"/>
      <attr-item tags="foc_bahan"/>
      <attr-item tags="foc_bahal"/>
      <attr-item tags="foc_beson"/>
      <attr-item tags="foc_behan"/>
      <attr-item tags="foc_behal"/>
      <attr-item tags="foc_bat"/>
      <attr-item tags="foc_be"/>
      <attr-item tags="foc_ge"/>
      <attr-item tags="foc_ge-pos"/>
      <attr-item tags="foc_ge-neg"/>
     <attr-item tags="foc_gen"/>
      <attr-item tags="foc_ges"/>
      <attr-item tags="foc_gis"/>
      <attr-item tags="foc_hal"/>
      <attr-item tags="foc_han"/>
      <attr-item tags="foc_naj"/>
      <attr-item tags="foc_son"/>
    </def-attr>

    <def-attr n="a_synlabel">
       <attr-item tags="@X"/>
       <attr-item tags="@HNOUN"/>
       <attr-item tags="@CNP"/>
       <attr-item tags="@CVP"/>
       <attr-item tags="@→CC"/>
       <attr-item tags="@N←"/>
       <attr-item tags="@→N"/>
       <attr-item tags="@←OBJ"/>
       <attr-item tags="@OBJ"/>
       <attr-item tags="@→Pron"/>
       <attr-item tags="@PCLE"/>
       <attr-item tags="@→A"/>
       <attr-item tags="@APP-N←"/>
       <attr-item tags="@APP-Pron←"/>
       <attr-item tags="@OBJ→"/>
       <attr-item tags="@-F←OBJ"/>
       <attr-item tags="@SUBJ→"/>
       <attr-item tags="@←SUBJ"/>
       <attr-item tags="@SPRED→"/>
       <attr-item tags="@←SPRED"/>
       <attr-item tags="@\+FMAINV"/>
       <attr-item tags="@-FMAINV"/>
       <attr-item tags="@\+FAUXV"/>
       <attr-item tags="@-FAUXV"/>
       <attr-item tags="@A←"/>
       <attr-item tags="@COMP-CS←"/>
       <attr-item tags="@ADVL"/>
       <attr-item tags="@→ADVL"/>
       <attr-item tags="@←ADVL"/>
       <attr-item tags="@ADVL→"/>
       <attr-item tags="@HAB"/>
       <attr-item tags="@HAB→"/>
       <attr-item tags="@←HAB"/>
       <attr-item tags="@Num←"/>
       <attr-item tags="@→Num"/>
       <attr-item tags="@INTERJ"/>
       <attr-item tags="@PCLE"/>
       <attr-item tags="@OPRED→"/>
       <attr-item tags="@←OPRED"/>
       <attr-item tags="@→P"/>
       <attr-item tags="@P←"/>
       <attr-item tags="@-FSUBJ→"/>
       <attr-item tags="@-FOBJ→"/>
       <attr-item tags="@-F←OBJ"/>
       <attr-item tags="@-F←ADVL"/>
       <attr-item tags="@VOC"/>
    </def-attr>


    <def-attr n="a_sem">
      <attr-item tags="sem_act"/>
      <attr-item tags="sem_act_plc"/>
      <attr-item tags="sem_amount"/>
      <attr-item tags="sem_amount_semcon"/>
      <attr-item tags="sem_ani"/>
      <attr-item tags="sem_ani_body-abstr_hum"/>
      <attr-item tags="sem_ani_build_hum_txt"/>
      <attr-item tags="sem_ani_build-part"/>
      <attr-item tags="sem_ani_group"/>
      <attr-item tags="sem_ani_group_hum"/>
      <attr-item tags="sem_ani_hum"/>
      <attr-item tags="sem_aniprod"/>
      <attr-item tags="sem_aniprod_hum"/>
      <attr-item tags="sem_aniprod_obj-clo"/>
      <attr-item tags="sem_aniprod_perc-phys"/>
      <attr-item tags="sem_aniprod_plc"/>
      <attr-item tags="sem_ani_veh"/>
      <attr-item tags="sem_body"/>
      <attr-item tags="sem_body-abstr"/>
      <attr-item tags="sem_body-abstr_prod-audio_semcon"/>
      <attr-item tags="sem_body_clth"/>
      <attr-item tags="sem_body_food"/>
      <attr-item tags="sem_body_group_hum"/>
      <attr-item tags="sem_body_hum"/>
      <attr-item tags="sem_body_mat"/>
      <attr-item tags="sem_body_measr"/>
      <attr-item tags="sem_body_plc"/>
      <attr-item tags="sem_body_time"/>
      <attr-item tags="sem_build"/>
      <attr-item tags="sem_build_edu_org"/>
      <attr-item tags="sem_build_org"/>
      <attr-item tags="sem_build-part"/>
      <attr-item tags="sem_cat"/>
      <attr-item tags="sem_clth"/>
      <attr-item tags="sem_clth-jewl"/>
      <attr-item tags="sem_clth-jewl_curr"/>
      <attr-item tags="sem_clth-jewl_org"/>
      <attr-item tags="sem_clth-part"/>
      <attr-item tags="sem_ctain"/>
      <attr-item tags="sem_ctain-abstr"/>
      <attr-item tags="sem_ctain-clth"/>
      <attr-item tags="sem_ctain-clth_veh"/>
      <attr-item tags="sem_ctain_furn"/>
      <attr-item tags="sem_ctain_tool"/>
      <attr-item tags="sem_curr"/>
      <attr-item tags="sem_dance"/>
      <attr-item tags="sem_domain"/>
      <attr-item tags="sem_drink"/>
      <attr-item tags="sem_dummytag"/>
      <attr-item tags="sem_edu"/>
      <attr-item tags="sem_edu_mat"/>
      <attr-item tags="sem_edu_org"/>
      <attr-item tags="sem_event"/>
      <attr-item tags="sem_event_food"/>
      <attr-item tags="sem_event_hum"/>
      <attr-item tags="sem_event_plc"/>
      <attr-item tags="sem_feat"/>
      <attr-item tags="sem_feat-measr"/>
      <attr-item tags="sem_feat-measr_plc"/>
      <attr-item tags="sem_feat-phys"/>
      <attr-item tags="sem_feat-phys_tool-write"/>
      <attr-item tags="sem_feat-phys_veh"/>
      <attr-item tags="sem_feat-phys_wthr"/>
      <attr-item tags="sem_feat_plant"/>
      <attr-item tags="sem_feat-psych"/>
      <attr-item tags="sem_food"/>
      <attr-item tags="sem_food-med"/>
      <attr-item tags="sem_food_plant"/>
      <attr-item tags="sem_furn"/>
      <attr-item tags="sem_game_obj-play"/>
      <attr-item tags="sem_geom"/>
      <attr-item tags="sem_group"/>
      <attr-item tags="sem_group_hum"/>
      <attr-item tags="sem_group_hum_plc"/>
      <attr-item tags="sem_hum"/>
      <attr-item tags="sem_hum_lang"/>
      <attr-item tags="sem_hum_lang_plc"/>
      <attr-item tags="sem_hum_obj"/>
      <attr-item tags="sem_hum_org"/>
      <attr-item tags="sem_hum_tool"/>
      <attr-item tags="sem_hum_veh"/>
      <attr-item tags="sem_ideol"/>
      <attr-item tags="sem_lang"/>
      <attr-item tags="sem_lang_tool"/>
      <attr-item tags="sem_mat"/>
      <attr-item tags="sem_mat_plant"/>
      <attr-item tags="sem_mat_txt"/>
      <attr-item tags="sem_measr"/>
      <attr-item tags="sem_measr_time"/>
      <attr-item tags="sem_money"/>
      <attr-item tags="sem_money_obj"/>
      <attr-item tags="sem_money_txt"/>
      <attr-item tags="sem_obj"/>
      <attr-item tags="sem_obj-clo"/>
      <attr-item tags="sem_obj-el"/>
      <attr-item tags="sem_obj-ling"/>
      <attr-item tags="sem_obj-play"/>
      <attr-item tags="sem_obj-rope"/>
      <attr-item tags="sem_obj_semcon"/>
      <attr-item tags="sem_obj_state"/>
      <attr-item tags="sem_obj-surfc"/>
      <attr-item tags="sem_org"/>
      <attr-item tags="sem_org_rule"/>
      <attr-item tags="sem_org_txt"/>
      <attr-item tags="sem_part"/>
      <attr-item tags="sem_part_prod-cogn"/>
      <attr-item tags="sem_perc-emo"/>
      <attr-item tags="sem_perc-phys"/>
      <attr-item tags="sem_plant"/>
      <attr-item tags="sem_plant-part"/>
      <attr-item tags="sem_plant_plant-part"/>
      <attr-item tags="sem_plc"/>
      <attr-item tags="sem_plc-abstr"/>
      <attr-item tags="sem_plc-abstr_rel_state"/>
      <attr-item tags="sem_plc-abstr_route"/>
      <attr-item tags="sem_plc-elevate"/>
      <attr-item tags="sem_plc-line"/>
      <attr-item tags="sem_plc_pos"/>
      <attr-item tags="sem_plc_route"/>
      <attr-item tags="sem_plc_substnc"/>
      <attr-item tags="sem_plc_substnc_wthr"/>
      <attr-item tags="sem_plc_time"/>
      <attr-item tags="sem_plc_tool-catch"/>
      <attr-item tags="sem_plc-water"/>
      <attr-item tags="sem_plc_wthr"/>
      <attr-item tags="sem_pos"/>
      <attr-item tags="sem_process"/>
      <attr-item tags="sem_prod"/>
      <attr-item tags="sem_prod-audio"/>
      <attr-item tags="sem_prod-audio_txt"/>
      <attr-item tags="sem_prod-cogn"/>
      <attr-item tags="sem_prod-cogn_txt"/>
      <attr-item tags="sem_prod-ling"/>
      <attr-item tags="sem_prod-vis"/>
      <attr-item tags="sem_rel"/>
      <attr-item tags="sem_route"/>
      <attr-item tags="sem_rule"/>
      <attr-item tags="sem_semcon"/>
      <attr-item tags="sem_semcon_txt"/>
      <attr-item tags="sem_sign"/>
      <attr-item tags="sem_state"/>
      <attr-item tags="sem_state-sick"/>
      <attr-item tags="sem_substnc"/>
      <attr-item tags="sem_substnc_wthr"/>
      <attr-item tags="sem_sur"/>
      <attr-item tags="sem_time"/>
      <attr-item tags="sem_time_wthr"/>
      <attr-item tags="sem_tool"/>
      <attr-item tags="sem_tool-catch"/>
      <attr-item tags="sem_tool-clean"/>
      <attr-item tags="sem_tool-it"/>
      <attr-item tags="sem_tool-measr"/>
      <attr-item tags="sem_tool-music"/>
      <attr-item tags="sem_tool-write"/>
      <attr-item tags="sem_txt"/>
      <attr-item tags="sem_veh"/>
      <attr-item tags="sem_wpn"/>
      <attr-item tags="sem_wthr"/>
    </def-attr>



    <def-attr n="x_func">
      <attr-item tags="←ext→"/>
      <attr-item tags="←hab→"/>
    </def-attr>



  </section-def-attrs>
  <section-def-vars>
    <def-var n="number"/>
    <def-var n="synlabel"/>
    <def-var n="poss"/>
    <def-var n="case"/>
    <def-var n="nmbr"/>
    <def-var n="main-verb-lemma"/>
  </section-def-vars>
  <section-def-lists>
    <def-list n="stative-verbs"><!--sme place-verbs, hope they work the same in sma -->
      <list-item v="ássat"/>
      <list-item v="orrut"/>
      <list-item v="veallát"/>
      <list-item v="čuožžut"/>
      <list-item v="čohkkát"/>
      <list-item v="čohkahit"/>
      <list-item v="buolvvastallat"/>
      <list-item v="buolvvastit"/>
      <list-item v="čippostallat"/>
      <list-item v="čuččodit"/>
      <list-item v="morihit"/>
      <list-item v="gohččát"/>
      <list-item v="gullát"/>
      <list-item v="morránit"/>
      <list-item v="orodit"/>
      <list-item v="stuorrut"/>
      <list-item v="veallahit"/>
      <list-item v="eallit"/>
    </def-list>
    <def-list n="movement-verbs">
      <list-item v="boahtit"/>
      <list-item v="fárret"/>
      <list-item v="beassat"/>
      <list-item v="čuoigat"/>
      <list-item v="vuodjit"/>
      <list-item v="girdit"/>
      <list-item v="johtit"/>
      <list-item v="sirdit"/>
      <list-item v="sihkkelastit"/>
      <list-item v="viehkat"/>
      <list-item v="vázzit"/>
      <list-item v="vuolgit"/>
    </def-list>
  </section-def-lists>
  <section-def-macros>

    <def-macro n="convert-deriv1" npar="1">
      <choose>  
        <when>
          <test>
               <equal><clip pos="1" side="sl" part="a_deriv"/><lit-tag v="der_at"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_deriv"/><lit-tag v="der_laakan"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="proc-syn-foc-qst1" npar="1">
      <choose>
        <when>
          <test>
            <or>
               <equal><clip pos="1" side="sl" part="a_synlabel"/><lit-tag v="@-FMAINV"/></equal>
               <equal><clip pos="1" side="sl" part="a_synlabel"/><lit-tag v="@\+FMAINV"/></equal>
            </or>
          </test>
          <let><var n="main-verb-lemma"/><clip pos="1" side="sl" part="lem"/></let>
        </when>
      </choose>

          <let><clip pos="1" side="tl" part="a_sem"/><lit v=""/></let>

          <let><clip pos="1" side="tl" part="x_func"/><lit v=""/></let>

          <!-- Set the +Allegro tag to nothing for now -->
          <let><clip pos="1" side="tl" part="a_allegro"/><lit v=""/></let>

          <call-macro n="convert-deriv1">
            <with-param pos="1"/>
          </call-macro>
          <!-- If the word has a syntactic function label, set the variable with that
               label, if not, set the label to @X.
               Remove question particle. -->
          <let><var n="synlabel"/><lit-tag v="@X"/></let>
          <choose>
            <when>
              <test>
                <not><equal><clip pos="1" side="tl" part="a_synlabel"/><lit v=""/></equal></not>
              </test>
              <let><var n="synlabel"/><clip pos="1" side="sl" part="a_synlabel"/></let>
            </when>
          </choose>
          <let><clip pos="1" side="tl" part="a_synlabel"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="a_qst"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="a_foc"/><lit v=""/></let> <!-- Don't output focus particles -->
    </def-macro>

    <def-macro n="proc-syn-foc-qst2" npar="2">
      <call-macro n="proc-syn-foc-qst1">
        <with-param pos="2"/>
      </call-macro>
      <call-macro n="proc-syn-foc-qst1">
        <with-param pos="1"/>
      </call-macro>
      <!-- Sometimes a combintion of syntactic labels results in a new label for the chunk -->
      <choose>
        <when>
          <test>
            <and>
              <equal><clip pos="1" side="sl" part="a_synlabel"/><lit-tag v="@-FMAINV"/></equal>
              <equal><clip pos="2" side="sl" part="a_synlabel"/><lit-tag v="@+FAUXV"/></equal>
            </and>
          </test>
          <let><var n="synlabel"/><lit-tag v="@+FMAINV"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="proc-syn-foc-qst3" npar="2">
      <call-macro n="proc-syn-foc-qst1">
        <with-param pos="3"/>
      </call-macro>
      <call-macro n="proc-syn-foc-qst1">
        <with-param pos="2"/>
      </call-macro>
      <call-macro n="proc-syn-foc-qst1">
        <with-param pos="1"/>
      </call-macro>
    </def-macro>

    <def-macro n="convert-case-nbr-poss1" npar="1">
      <let><var n="poss"/><lit-tag v="PX"/></let>
      <choose>
        <when>
          <test>
            <not><equal><clip pos="1" side="sl" part="a_poss"/><lit v=""/></equal></not>
          </test>
          <let><var n="poss"/><clip pos="1" side="sl" part="a_poss"/></let>
        </when>
      </choose>

      <choose> <!-- For seammá:seamma -->
        <when>
          <test>
            <and>
              <equal><clip pos="1" side="tl" part="a_indecl"/><lit-tag v="indecl"/></equal>
              <not><equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj"/></equal></not>
            </and>
          </test>
          <let><var n="case"/><lit v=""/></let>
          <let><var n="nmbr"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="a_case"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="a_nbr"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="a_attr"/><lit v=""/></let>
        </when>
      </choose>

      <choose>
        <when>
          <test>
            <not><equal><clip pos="1" side="sl" part="a_pron"/><lit-tag v="prn.ref"/></equal></not>
          </test>
          <let><clip pos="1" side="tl" part="a_poss"/><lit v=""/></let>
        </when>
      </choose>
      <choose>
        <when>
          <test>
            <or>
              <and><equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
                   <or>
                   <equal><clip pos="1" side="sl" part="a_synlabel"/><lit-tag v="@HAB"/></equal>
                   <equal><clip pos="1" side="sl" part="a_synlabel"/><lit-tag v="@HAB→"/></equal>
                   <equal><clip pos="1" side="sl" part="a_synlabel"/><lit-tag v="@←HAB"/></equal></or>
              </and>
              <in caseless="yes"><var n="main-verb-lemma"/><list n="stative-verbs"/></in>
            </or>
          </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="gen"/></let>
        </when>
        <when>
          <test>
            <and>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
              <in caseless="yes"><var n="main-verb-lemma"/><list n="movement-verbs"/></in>
            </and>
          </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ela"/></let>
        </when>
        <when>
          <test>
            <and>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="loc"/></equal>
            <not><in caseless="yes"><var n="main-verb-lemma"/><list n="movement-verbs"/></in></not>
            </and>
          </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="ine"/></let>
        </when>

      </choose>

      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_nbr"/><lit-tag v="ND"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></let>
        </when>
      </choose>

      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="sl" part="a_case"/><lit-tag v="CD"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_case"/><lit-tag v="nom"/></let>
        </when>
      </choose>

      <choose>
        <when>
          <test>
            <and>
              <equal><clip pos="1" side="sl" part="a_synlabel"/><lit-tag v="@←SPRED"/></equal>
              <equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj"/></equal>
            </and>
          </test>
          <let><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></let>
        </when>
      </choose>

      <choose> <!-- For adjectives -->
        <when>
          <test>
            <and>
              <equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj"/></equal>
              <not><equal><clip pos="1" side="sl" part="a_nbr"/><lit v=""/></equal></not>
              <not><equal><clip pos="1" side="sl" part="a_case"/><lit v=""/></equal></not>
              <equal><clip pos="1" side="tl" part="a_indecl"/><lit-tag v="indecl"/></equal>
            </and>
          </test>
          <let><var n="case"/><lit v=""/></let>
          <let><var n="nmbr"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="a_nbr"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="a_case"/><lit v=""/></let>
          <let>
            <clip pos="1" side="tl" part="whole"/>
            <concat>
              <clip pos="1" side="tl" part="whole"/>
              <lit-tag v="attr"/>
            </concat>
          </let>
        </when>
      </choose>

      <let><clip pos="1" side="tl" part="a_indecl"/><lit v=""/></let>


    </def-macro>

    <def-macro n="convert-case-nbr-poss2" npar="2">
      <let><var n="case"/><lit v=""/></let>
      <let><var n="nmbr"/><lit v=""/></let>
      <call-macro n="convert-case-nbr-poss1">
        <with-param pos="1"/>
      </call-macro>
      <choose>
        <when>
          <test>
            <and>
            <equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj"/></equal>
            <not>
            <and>
            <equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="n"/></equal>
            <equal><clip pos="1" side="tl" part="a_case"/><lit-tag v="gen"/></equal></and></not></and>
          </test>
          <let><var n="case"/><clip pos="1" side="tl" part="a_case"/></let>
          <let><var n="nmbr"/><clip pos="1" side="tl" part="a_nbr"/></let>
        </when>
        <otherwise>
          <let><var n="case"/><clip pos="2" side="tl" part="a_case"/></let>
          <let><var n="nmbr"/><clip pos="2" side="tl" part="a_nbr"/></let>
        </otherwise>
      </choose>
      <call-macro n="convert-case-nbr-poss1">
        <with-param pos="2"/>
      </call-macro>
    </def-macro>


    <def-macro n="convert-case-nbr-poss3" npar="3">
      <let><var n="case"/><lit v=""/></let>
      <let><var n="nmbr"/><lit v=""/></let>
      <call-macro n="convert-case-nbr-poss1">
        <with-param pos="1"/>
      </call-macro>
      <let><var n="case"/><clip pos="1" side="tl" part="a_case"/></let>
      <let><var n="nmbr"/><clip pos="1" side="tl" part="a_nbr"/></let>
      <call-macro n="convert-case-nbr-poss1">
        <with-param pos="2"/>
      </call-macro>
      <call-macro n="convert-case-nbr-poss1">
        <with-param pos="3"/>
      </call-macro>
    </def-macro>

    <def-macro n="convert-compounds1" npar="1">
      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="tl" part="a_cmp"/><lit-tag v="sgcmp"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_cmp"/><lit-tag v="sgnomcmp"/></let>
        </when>
      </choose>
      <choose>
        <when>
          <test>
            <and>
              <equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal>
              <not><equal><clip pos="1" side="tl" part="a_cmp"/><lit v=""/></equal></not>
            </and>
          </test>
          <let><clip pos="1" side="tl" part="a_cmp"/><lit-tag v="attr"/></let>
        </when>

      </choose>
    </def-macro>

    <def-macro n="convert-compounds2" npar="2">
      <call-macro n="convert-compounds1">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="convert-compounds1">
        <with-param pos="2"/>
      </call-macro>
    </def-macro>


    <def-macro n="convert-compounds3" npar="3">
      <call-macro n="convert-compounds1">
        <with-param pos="1"/>
      </call-macro>
      <call-macro n="convert-compounds1">
        <with-param pos="2"/>
      </call-macro>
      <call-macro n="convert-compounds1">
        <with-param pos="3"/>
      </call-macro>
    </def-macro>

    <def-macro n="convert-verb-deriv1" npar="1">

      <choose>
        <when>
          <test>
               <equal><clip pos="1" side="sl" part="a_deriv"/><lit-tag v="der_ahtti"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="a_deriv"/><lit-tag v="der_ahtje"/></let>
        </when>
      </choose>
    </def-macro>




  </section-def-macros>
  <section-rules>

    <!-- SECTION: Nominal groups -->

    <rule comment="REGLA: pron-pers">
      <pattern>
        <pattern-item n="prn-pers"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="prn-pers" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: pron-refl">
      <pattern>
        <pattern-item n="prn-refl"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="ref" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="REFL"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: pron-res">
      <pattern>
        <pattern-item n="prn-res"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="ref" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="RES"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: pron-rel">
      <pattern>
        <pattern-item n="prn-rel"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="REL"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: pron-dem">
      <pattern>
        <pattern-item n="prn-dem"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="prn-dem" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="REGLA: pron-itg">
      <pattern>
        <pattern-item n="prn-itg"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="prn-itg" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>




    <rule comment="REGLA: pron-indef">
      <pattern>
        <pattern-item n="prn-indef"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="prn-indef" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>




    <rule comment="REGLA: num">
      <pattern>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: n-cmp n-cmp n-cmp n">
      <pattern>
        <pattern-item n="n-cmp"/>
        <pattern-item n="n-cmp"/>
        <pattern-item n="n-cmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="convert-compounds3">
          <with-param pos="3"/>
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="4"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="4"/>
        </call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <mlu>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="3" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="4" side="tl" part="whole"/>
              </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: n-cmp n-cmp n">
      <pattern>
        <pattern-item n="n-cmp"/>
        <pattern-item n="n-cmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="convert-compounds2">
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="3"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="3"/>
        </call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <mlu>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="3" side="tl" part="whole"/>
              </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: n-cmp n">
      <pattern>
        <pattern-item n="n-cmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="convert-compounds1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <mlu>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: n">
      <pattern>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: adj-rdep n">
      <pattern>
        <pattern-item n="adj-rdep"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst2">
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss2">
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="a-n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <var n="nmbr"/>
              <var n="case"/>
              <clip pos="1" side="tl" part="a_attr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: n num-ldep">
      <pattern>
        <pattern-item n="n"/>
        <pattern-item n="num-ldep"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss2">
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="n-num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: n-prop-pers">
      <pattern>
        <pattern-item n="n-prop-pers"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="prop" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: pron-attr n-cmp n">
      <pattern>
        <pattern-item n="prn-attr"/>
        <pattern-item n="n-cmp"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="convert-compounds1">
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="proc-syn-foc-qst2">
          <with-param pos="3"/>
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss2">
          <with-param pos="3"/>
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="attr-cmp-n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <var n="nmbr"/>
              <var n="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <mlu>
              <lu>
                <clip pos="2" side="tl" part="whole"/>
              </lu>
              <lu>
                <clip pos="3" side="tl" part="whole"/>
              </lu>
            </mlu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="REGLA: pron-attr pron-attr n">
      <pattern>
        <pattern-item n="prn-attr"/>
        <pattern-item n="prn-attr"/>
        <pattern-item n="n"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst3">
          <with-param pos="3"/>
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss3">
          <with-param pos="3"/>
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="attr-attr-n" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><var n="poss"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <var n="nmbr"/>
              <var n="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_pron"/>
              <var n="nmbr"/>
              <var n="case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>




    <!-- SECTION: Verbal groups -->

    <rule comment="REGLA: verb to adv"> <!-- go oassálastet dákkár giellabesiin - goh mealtan dagkeres gïelebiesine -->
      <pattern>
        <pattern-item n="verb_to_adv"/>
      </pattern>
      <action>
           <let><clip pos="1" side="tl" part="tags"/><lit-tag v="adv"/></let>
        <out>
          <chunk name="adverb" case="caseFirstWord">
             <tags>
              <tag><lit-tag v="SV"/></tag>
            </tags>
           <lu>
				<clip pos="1" side="tl" part="whole"/>            
		  </lu>
          </chunk>
        </out>
      </action>
    </rule>
  <rule comment="REGLA: ii">
      <pattern>
        <pattern-item n="ii"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="ii" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><clip pos="1" side="tl" part="a_mood"/></tag>
              <tag><lit-tag v="XD"/></tag>
              <tag><clip pos="1" side="tl" part="a_pers"/></tag>
              <tag><clip pos="1" side="tl" part="a_nbr"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <clip pos="1" side="tl" part="a_trans"/>
              <clip pos="1" side="tl" part="a_neg"/>
              <clip pos="1" side="tl" part="a_mood"/>
              <lit-tag v="4"/>
              <clip pos="1" side="tl" part="a_pers"/>
              <clip pos="1" side="tl" part="a_nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: conneg">
      <pattern>
        <pattern-item n="conneg"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="conneg" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
              <tag><clip pos="1" side="tl" part="a_mood"/></tag>
              <tag><clip pos="1" side="tl" part="a_tense"/></tag>
              <tag><clip pos="1" side="tl" part="a_pers"/></tag>
              <tag><clip pos="1" side="tl" part="a_nbr"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <clip pos="1" side="tl" part="a_trans"/>
              <clip pos="1" side="tl" part="a_conneg"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: ii conneg">
      <pattern>
        <pattern-item n="ii"/>
        <pattern-item n="conneg"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="ii-conneg" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <clip pos="1" side="tl" part="a_trans"/>
              <clip pos="1" side="tl" part="a_neg"/>
              <clip pos="1" side="tl" part="a_mood"/>
              <clip pos="2" side="tl" part="a_tense"/>
              <clip pos="1" side="tl" part="a_pers"/>
              <clip pos="1" side="tl" part="a_nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <clip pos="2" side="tl" part="a_trans"/>
              <clip pos="2" side="tl" part="a_conneg"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb-fin">
      <pattern>
        <pattern-item n="verb-fin"/>
      </pattern>
      <action>
        <call-macro n="convert-verb-deriv1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <let><clip pos="1" side="tl" part="a_mood"/><lit-tag v="indic"/></let>
        <out>
          <chunk name="vblex" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <!--<var n="main-verb-lemma"/>-->
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: leat-aux verb-prfprc">
      <pattern>
        <pattern-item n="leat-aux"/>
        <pattern-item n="prfprcword"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst2">
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-verb-deriv1">
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="vblex" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
<!--
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
-->
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

<!--    <rule comment="REGLA: leat-aux adv verb-prfprc">
      <pattern>
        <pattern-item n="leat-aux"/>
        <pattern-item n="adv"/>
        <pattern-item n="verb-prfprc"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst3">
          <with-param pos="3"/>
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-verb-deriv1">
          <with-param pos="3"/>
        </call-macro>
        <out>
          <chunk name="vblex" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule> -->

    <rule comment="REGLA: leat-main nominative">
      <pattern>
        <pattern-item n="leat-main"/>
        <pattern-item n="nominative"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst2">
          <with-param pos="1"/>
          <with-param pos="2"/>
        </call-macro>
        <out>
          <chunk name="copnom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
<!--
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
-->
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: leat-main nominative">
      <pattern>
        <pattern-item n="leat-main"/>
        <pattern-item n="adj"/>
        <pattern-item n="nominative"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst2">
          <with-param pos="3"/>
           <with-param pos="2"/>
         <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="vblex" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
<!--
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
-->
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: verb-inf">
      <pattern>
        <pattern-item n="verb-inf"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-verb-deriv1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="inf" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: verb-prfprc">
      <pattern>
        <pattern-item n="verb-prfprc"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-verb-deriv1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="prfprc" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: verb-actio">
      <pattern>
        <pattern-item n="verb-actio"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="actio" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_verb"/>
              <clip pos="1" side="tl" part="a_trans"/>
              <lit-tag v="ger"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="REGLA: verb-imp">
      <pattern>
        <pattern-item n="verb-imp"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="imp" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <!-- SECTION: Adjective groups -->


    <rule comment="REGLA: adj">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <call-macro n="convert-case-nbr-poss1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- SECTION: Adverbial groups -->

    <rule comment="REGLA: adv">
      <pattern>
        <pattern-item n="adv"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- SECTION: Adpositions -->

    <rule comment="REGLA: pr">
      <pattern>
        <pattern-item n="pr"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="pr" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PREP"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: post">
      <pattern>
        <pattern-item n="post"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="post" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="POST"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- SECTION: Conjunctions -->

    <rule comment="REGLA: cs">
      <pattern>
        <pattern-item n="cnjsub"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="cnjsub" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="cnjsub"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: cc">
      <pattern>
        <pattern-item n="cnjcoo"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="cnjcoo" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="cnjcoo"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <!-- SECTION: Miscellaneous -->

    <rule comment="REGLA: sent">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
        <call-macro n="proc-syn-foc-qst1">
          <with-param pos="1"/>
        </call-macro>
        <out>
          <chunk name="sent" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SENT"/></tag>
              <tag><var n="synlabel"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

  </section-rules>
</transfer>
