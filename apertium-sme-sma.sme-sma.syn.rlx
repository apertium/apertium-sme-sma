#Distributed under the terms of the GNU General Public License version 2 
# or any later version.

# ==================================================================== #
#    N O R T H E R N  S Á M I  D I S A M B I G U A T O R               
# ==================================================================== #
# ==================================================================== 

#  Sámi language technology project 2003-2006, University of Tromsø #

# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>";

#PARENTHESES = "<$(>" "<$)>" "<$[>" "<$]>" "<${>" "<$}>" "<$«>" "<$»>" ;

# ============= #
# Tags and sets #
# ============= #

SETS

# I define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.

LIST BOS = (>>>) (<s>);
LIST EOS = (<<<) (</s>);

# CG3 doesn´t function without >>> and <<< !

# Tags declared as single-membered LISTs 
# ======================================

# Parts of speech
# ---------------

LIST N = n ;
LIST A = a ;
LIST Adv = adv ;
LIST V = v ;
LIST Pron = pron ;

LIST CS = cs ;
LIST CC = cc ;
SET CC-CS = CC OR CS ;
LIST Po = po ;
LIST Pr = pr ;
LIST Pcle = pcle ;
LIST Num = num ;
LIST Interj = interj ;
LIST ABBR = abbr ;
LIST ACR = acr ;

LIST CLB = clb ;
LIST LEFT = left ;
LIST RIGHT = right ;
LIST WEB = web ;
LIST QMARK = """ ; # add " for syntax colouring.
LIST PPUNCT = punct ;
SET PUNCT = PPUNCT - QMARK ;

LIST COMMA = "," ;
LIST ¶ = ¶;

#LIST V* = V* ;

#!! * Sets for POS sub-categories
# ------------------

LIST Pers = pers ;
LIST Dem = dem ;
LIST Interr = interr ;
LIST Indef = indef ;

LIST Recipr = recipr ;
LIST Refl = refl ;
LIST Rel = rel ;
 
#LIST Adp = Adp ;

LIST Coll = coll ;
LIST NomAg = nomag ;
LIST G3 = g3 ;
LIST Prop = prop ;

#!! * Sets for Semantic tags
# -------------

LIST Sem_Ani = sem_ani ;
LIST Sem_Fem = sem_fem ;
LIST Sem_Mal = sem_mal ;
LIST Sem_Obj = sem_obj ;
LIST Sem_Org = sem_org ;
LIST Sem_Plc = sem_plc ;
LIST Sem_Sur = sem_sur ;
LIST Sem_Time = sem_time ;
LIST Sem_Hum = sem_hum ;
LIST Sem_Date = sem_date ;
LIST Sem_Group = sem_group ;

LIST HUMAN = sem_hum sem_mal sem_fem sem_sur pers numag der_numag ;

#!! * Sets for Morphosyntactic properties
# --------------------------

LIST Nom = nom ;
LIST Acc = acc ;
LIST Gen = gen ;
LIST Ill = ill ;
LIST Loc = loc ;
LIST Com = com ;
LIST Ess = ess ;

LIST Sg = sg ;
LIST Du = du ;
LIST Pl = pl ;

LIST RCmpnd = rcmpnd ;

LIST Cmpnd = cmpnd ;
 
LIST SgNomCmp = sgnomcmp ;
 
LIST SgGenCmp = sggencmp ;

LIST ShCmp = shcmp ;

LIST PxSg1 = pxsg1 ;
LIST PxSg2 = pxsg2 ;
LIST PxSg3 = pxsg3 ;
 
LIST PxDu1 = pxdu1 ;
LIST PxDu2 = pxdu2 ;
LIST PxDu3 = pxdu3 ;
 
LIST PxPl1 = pxpl1 ;
LIST PxPl2 = pxpl2 ;
LIST PxPl3 = pxpl3 ;

LIST Comp = comp ;
LIST Superl = superl ;

LIST Attr = attr ;
LIST Ord = ord ;
 
LIST Qst = qst ;
 
# The ("ge" Pcle) etc. are used in Apertium
LIST Foc_ge = foc_ge ("ge" pcle) ;
LIST Foc_gen = foc_gen ("gen" pcle) ;
LIST Foc_ges = foc_ges ("ges" pcle) ;
LIST Foc_gis = foc_gis ("gis" pcle) ;
LIST Foc_naj = foc_naj ("naj" pcle) ;
LIST Foc_ba = foc_ba ("ba" pcle) ;
LIST Foc_be = foc_be ("be" pcle) ;
LIST Foc_hal = foc_hal ("hal" pcle) ;
LIST Foc_han = foc_han ("han" pcle) ;
LIST Foc_bat = foc_bat ("bat" pcle) ;
LIST Foc_son = foc_son ("son" pcle) ;

LIST IV = iv ;
LIST TV = tv ;

LIST Der_Pass = der_passl der_passs ;

LIST Prt = prt;
LIST Prs = prs ;
 

LIST Ind = ind ;
LIST Pot = pot ;
LIST Cond = cond ;

LIST Imprt = imprt ;
LIST ImprtII = imprtii ;

LIST Sg1 = sg1 ;
LIST Sg2 = sg2 ;
LIST Sg3 = sg3 ;

LIST Du1 = du1 ;
LIST Du2 = du2 ;
LIST Du3 = du3 ;

LIST Pl1 = pl1 ;
LIST Pl2 = pl2 ;
LIST Pl3 = pl3 ;

LIST Inf = inf ;
LIST ConNeg = conneg ;
LIST Neg = neg ;

LIST PrfPrc = prfprc ;
LIST VGen = vgen ;

LIST PrsPrc = prsprc ;
 

LIST Ger = ger ;
LIST Sup = sup ;
LIST Actio = actio ;

LIST Der_PassL = der_passl ;
LIST Der_NomAg = der_nomag ;
LIST Actor = nomag der_nomag ;
LIST VAbess = vabess ;

# Derivation
# ----------

LIST Der_adda = der_adda ;
LIST Der_ahtti = der_ahtti ;
LIST Der_alla = der_alla ;
LIST Der_asti = der_asti ;
LIST Der_easti = der_easti ;
LIST Der_d = der_d ;
LIST Der_NomAct = der_nomact ;
LIST Der_eamoš = der_eamoš ;
LIST Der_amoš = der_amoš ;
LIST Der_eapmi = der_eapmi ;
LIST Der_geahtes = der_geahtes ;
LIST Der_gielat = der_gielat ;
LIST !better: = !better: ;
LIST Der_NuA = der_nua ;

LIST Der_h = der_h ;
LIST Der_heapmi = der_heapmi ;
LIST Der_hudda = der_hudda ;
LIST Der_huhtti = der_huhtti ;
LIST Der_huvva = der_huvva ;
LIST Der_halla = der_halla ;
LIST Der_j = der_j ;
LIST Der_l = der_l ;
LIST Der_laš = der_laš ;
LIST Der_las = der_las ;
LIST Der_hat = der_hat ;

LIST Der_meahttun = der_meahttun ;
LIST Der_muš = der_muš ;
LIST Der_n = der_n ;
LIST Der_st = der_st ;
LIST Der_stuvva = der_stuvva ;
LIST Der_upmi = der_upmi ;
LIST Der_supmi = der_supmi ;
LIST Der_vuohta = der_vuohta ;
LIST Der_goahti = der_goahti ;

LIST Der_lágan = der_lágan ;
LIST Der_lágán = der_lágán ;
LIST Der_lágaš = der_lágaš ;
LIST Der_jagáš = der_jagáš ;
LIST Der_jahkásaš = der_jahkásaš ;
LIST Der_diibmosaš = der_diibmosaš ;

LIST Der_Dimin = der_dimin ;
LIST Der_viđá = der_viđá ;
LIST Der_viđi = der_viđi ;
LIST Der_veara = der_veara ;
LIST Der_duohke = der_duohke ;
LIST Der_duohkai = der_duohkai ;
LIST Der_vuolle = der_vuolle ;
LIST Der_vuollai = der_vuollai ;
LIST Der_vuolde = der_vuolde ;

# Syntactic tags
# --------------

LIST @+FAUXV = @+FAUXV ;
LIST @+FMAINV = @+FMAINV ;
LIST @-FAUXV = @-FAUXV ;
 
LIST @-FMAINV = @-FMAINV ;
LIST @-FSUBJ→ = @-FSUBJ→ ;
LIST @-F←OBJ = @-F←OBJ ;
LIST @-FOBJ→ = @-FOBJ→ ;
LIST @SPRED←OBJ = @SPRED←OBJ ;
LIST @-FADVL = @-FADVL ;

SET FOBJ = @-F←OBJ OR @-FOBJ→ ; 
SET FMAINV = @-FMAINV OR @+FMAINV OR (v @←obj) OR (v @n←) OR (v @←subj) OR (v @←advl) ;
SET FAUXV = @-FAUXV OR @+FAUXV ;

LIST @ADVL = @ADVL @ADVL→ @ADVL← @←ADVL @→ADVL @-F←ADVL ;
LIST @→ADVL = @→ADVL ;
LIST @ADVL← = @ADVL← ;
LIST @←ADVL = @←ADVL ;
LIST @ADVL→ = @ADVL→ ;

LIST @←HAB = @←HAB ;
LIST @HAB→ = @HAB→ ;
 
LIST @→N = @→N ;

LIST @N← = @N← ;
 

LIST @→A = @→A ;

LIST @P← = @P← ;

LIST @→P = @→P ;

LIST @HNOUN = @HNOUN ;
LIST @INTERJ = @INTERJ ;
 
LIST @→Num = @→Num;

LIST @Pron← = @Pron← ;
LIST @→Pron = @→Pron ;

LIST @Num← = @Num← ;

LIST @OBJ = @OBJ ;
LIST @←OBJ = @←OBJ ;
LIST @OBJ→ = @OBJ→ ;
LIST @OPRED = @OPRED ;
LIST @←OPRED = @←OPRED ;
LIST @OPRED→ = @OPRED→ ;
LIST @PCLE = @PCLE ;
LIST @COMP-CS← = @COMP-CS← ;
 
LIST @SPRED = @SPRED ;
LIST @←SPRED = @←SPRED ;
LIST @SPRED→ = @SPRED→ ;
LIST @SUBJ = @SUBJ ;
LIST @←SUBJ = @←SUBJ ;
LIST @SUBJ→ = @SUBJ→ ;
SET SUBJ = @←SUBJ OR @SUBJ→ OR @SUBJ ;
SET SPRED = @←SPRED OR @SPRED→ OR @SPRED ;
SET OPRED = @←OPRED OR @OPRED→ OR @OPRED ;

LIST @PPRED = @PPRED ;
 
LIST @APP = @APP ;
LIST @APP-N← = @APP-N← ;
LIST @APP-Pron← = @APP-Pron← ;
LIST @APP→Pron = @APP→Pron ;
LIST @APP-Num← = @APP-Num← ;
LIST @APP-ADVL← = @APP-ADVL← ;
LIST @VOC = @VOC ;

LIST @CVP = @CVP ;
LIST @CNP = @CNP ;

SET OBJ = (@←obj) OR (@obj→) OR (@obj) OR (@-f←obj) OR (@-fobj→) ;
LIST ←OBJ = @-F←OBJ @←OBJ ;
LIST OBJ→ = @OBJ→ @-FOBJ→ ;

SET ←OBJ-OTHERS = ←OBJ OR (gen) OR (nom) OR (ess) OR (loc) OR (adv) ;
SET OBJ→-OTHERS = OBJ→ OR (gen) OR (nom) OR (ess) OR (loc) OR (adv) ;

SET SYN-V = V + SUBJ OR OBJ + V OR @ADVL + V OR (v @→n) OR (v @n←) OR (v @a←) ;


LIST @X = @X ;



# Other tags
# ----------

LIST ABBR = abbr ;
LIST ACR = acr ;
LIST CLB = clb ;

LIST QMARK = """ ; # add " for syntax colouring.
LIST PPUNCT = punct ;
SET PUNCT = PPUNCT - QMARK ;


# Single-word sets
# ----------------
 
LIST COMMA = "," ;
LIST ¶ = ¶;

LIST OKTA = "akta" "okta";
LIST go = "go" ;
 

# Initials
# --------

LIST INITIAL = "adj" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"
"n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"
"á" "æ" "ø" "å" "ö" "ä" ;

LIST CAP-INITIAL = "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M"
"N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"
"Á" "Æ" "Ø" "Å" "Ö" "Ä" ;

# Tag sets
# ========
  SETS
# ========


# Word or not
# -----------
LIST WORD = n a adv v pron cs cc po pr interj pcle num abbr acr \? ;
 # any word

SET REALWORD = WORD - Num - Ord ;

SET REALWORD-NOTABBR = WORD - Num - Ord - ABBR ;

SET WORD-NOTDE = WORD - ("de") ; 

# Verb sets
# ---------

# Verbs and their complements
# - - - - - - - - - - - - - -

SET NOT-VERB = WORD - V ;

# Finiteness and mood
# - - - - - - - - - -

SET V-IND-FIN = Prs OR Prt ;
 # Problem: "In boahtán" is an invisible indicative

SET V-MOOD = Ind OR Pot OR Imprt OR ImprtII OR Cond OR (neg sup) ;

LIST GC = ("gč") ;

SET VFIN = GC OR V-MOOD - ConNeg ;

SET VFIN-POS = V-MOOD - ConNeg - Neg ;

SET VFIN-NOT-IMP = VFIN - Imprt ;

SET VFIN-NOT-NEG = VFIN - Neg ;
  # this might be to strict, besides, "iige" can be written "ii ge"

SET NOT-PRFPRC = WORD - PrfPrc ;

# Person
# - - - - 

LIST V-SG1 = (v ind prs sg1) (v ind prt sg1) (v cond prs sg1) 
(v cond prt sg1) (v pot prs sg1) (v neg ind sg1) ;
 
LIST V-SG2 = (v ind prs sg2) (v ind prt sg2) (v cond prs sg2) 
(v cond prt sg2) (v pot prs sg2) (v neg ind sg2) ;
 
LIST V-SG3 = (v ind prs sg3) (v ind prt sg3) (v cond prs sg3) 
(v cond prt sg3) (v pot prs sg3) (v neg ind sg3) ;
 
LIST V-DU1 = (v ind prs du1) (v ind prt du1) (v cond prs du1) 
	 (v cond prt du1) (v pot prs du1) (v neg ind du1) ;
 
LIST V-DU2 = (v ind prs du2) (v ind prt du2) (v cond prs du2) 
	 (v cond prt du2) (v pot prs du2) (v neg ind du2) ;
 
LIST V-DU3 = (v ind prs du3) (v ind prt du3) (v cond prs du3) 
	 (v cond prt du3) (v pot prs du3) (v neg ind du3) ;
 
LIST V-PL1 = (v ind prs pl1) (v ind prt pl1) (v cond prs pl1) 
(v cond prt pl1) (v pot prs pl1) (v neg ind pl1) ;
 
LIST V-PL2 = (v ind prs pl2) (v ind prt pl2) (v cond prs pl2) 
(v cond prt pl2) (v pot prs pl2) (v neg ind pl2) ;
 
LIST V-PL3 = (v ind prs pl3) (v ind prt pl3) (v cond prs pl3) 
(v cond prt pl3) (v pot prs pl3) (v neg ind pl3) ;
 

 # Note that imperative verbs are not included in these sets!

# Some subsets of the VFIN sets
# - - - - - - - - - - - - - - -
SET V-SG = V-SG1 OR V-SG2 OR V-SG3 ;
SET V-DU = V-DU1 OR V-DU2 OR V-DU3 ;
SET V-PL = V-PL1 OR V-PL2 OR V-PL3 ;

SET V-DU-PL = V-DU1 OR V-DU2 OR V-DU3 OR V-PL1 OR V-PL2 OR V-PL3 ;

SET V-NOT-SG1 = VFIN-NOT-IMP - V-SG1 ;
SET V-NOT-SG2 = VFIN-NOT-IMP - V-SG2 ;
SET V-NOT-SG3 = VFIN-NOT-IMP - V-SG3 ;
SET V-NOT-DU1 = VFIN-NOT-IMP - V-DU1 ;
SET V-NOT-DU2 = VFIN-NOT-IMP - V-DU2 ;
SET V-NOT-DU3 = VFIN-NOT-IMP - V-DU3 ;
SET V-NOT-PL1 = VFIN-NOT-IMP - V-PL1 ;
SET V-NOT-PL2 = VFIN-NOT-IMP - V-PL2 ;
SET V-NOT-PL3 = VFIN-NOT-IMP - V-PL3 ;


SET V-1-2 = V-SG1 OR V-SG2 OR V-DU1 OR V-DU2 OR V-PL1 OR V-PL2 ;
SET V-3 = V-SG3 OR V-DU3 OR V-PL3 ;

# Sets consisting of forms of "leat" (these ones need to be rewritten)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LIST LEAT = ("leat" v ind prs pl1) ("leat" v ind prs pl3) 
("leat" v ind prs sg2) ("leat" v inf) ("leat" v ind prs conneg) ;

LIST LEAT-FIN-NOT-IMP = ("leat" v ind) ("leat" v cond) ("leat" v pot) ;
 
LIST VPRFPRC = (v prfprc) ;
LIST LEATPRFPRC = ("leat" prfprc) ;
SET PRC-NOT-LEAT = VPRFPRC - LEATPRFPRC ;
    # In order to distinguish between real leat-constructions and participles of other verbs
LIST HABEO-SG3 = ("leat" sg3) (v neg sg3) ("šaddat" sg3) ;

LIST HABEO-PL3 = ("leat" pl3) (v neg pl3) ("šaddat" pl3) ;

SET HABEO-3 = HABEO-SG3 OR HABEO-PL3 ;

# Pronoun sets
# ------------

LIST MUN = (pron pers sg1 nom) ;
LIST DON = (pron pers sg2 nom) ;
LIST SON = ("son" pron pers sg3 nom) ;
LIST MOAI = (pron pers du1 nom) ;
LIST DOAI = (pron pers du2 nom) ;
LIST SOAI = (pron pers du3 nom) ;
LIST MII-PERS = (pron pers pl1 nom) ;
LIST DII = (pron pers pl2 nom) ;
LIST SII = ("son" pron pers pl3 nom) ;

SET PPRON-NOM-NOT-DAT = MUN OR DON OR SON OR MOAI OR DOAI OR SOAI OR MII-PERS OR DII OR SII ;

SET PPRON-NOT-DAT = (pron pers) - ("dat") ;

SET PPRON-DU-PL = MOAI OR DOAI OR SOAI OR MII-PERS OR DII OR SII ;
SET PPRON-PL = MII-PERS OR DII OR SII ;

SET PRON-DU = MOAI OR DOAI OR SOAI ;

SET PPRON-NOT-SII = MUN OR DON OR SON OR MOAI OR DOAI OR SOAI OR MII-PERS OR DII ;

LIST PPRON-GEN = (sg1 gen) (sg2 gen) (sg3 gen) (du1 gen) (du2 gen) (du3 gen) 
	 (pl1 gen) (pl2 gen) (pl3 gen) ;

SET PPRON-NOT-GEN = (pron pers) - PPRON-GEN ;

LIST DEM-SG = (pron dem sg nom) ;
LIST DEM-PL = (pron dem pl nom) ;
SET NOT-DEM = WORD - Dem ;

LIST SGPRON = (pron sg1) (pron sg2) (pron sg3) (pron sg) (pron pxsg1) (pron pxsg2) (pron pxsg3) ;
LIST DUPRON = (pron du1) (pron du2) (pron du3) (pron pxdu1) (pron pxdu2) (pron pxdu3) ;
LIST PLPRON = (pron pl1) (pron pl2) (pron pl3) (pron pl) (pron pxpl1) (pron pxpl2) (pron pxpl3) ;
LIST DUPRON-NOTPX = (pron du1) (pron du2) (pron du3) ;

SET PRON-NOT-SG = DUPRON OR PLPRON ;

LIST DAT-PRON = ("dat") ("dát") ("diet") ("duot") ("dot") ;

LIST QUANT-PRON = "ollu" "olu" "unnán" "váháš" "veaháš" "veháš" ;
# This set is for choosing between Adv and Pron Indef.

# Adjectival sets and their complements
# -------------------------------------

SET NOT-A = WORD - A ;
SET NOT-A-COMMA = WORD - A - COMMA ;
SET NOT-Attr = WORD - Attr ;
SET NOT-A-PCLE = WORD - A - Pcle ;

SET NOT-A-ADV = WORD - A - Adv OR ("maid") ;

LIST NOMINAL-ADJ = "guoktilaš" "lámis" "oasálaš" ("suddu" der_laš) "viissis";
 
 # and many others
 
# Adverbial sets and their complements
# ------------------------------------
SET LEX-ADV = Adv - (a*) ;

SET NOT-ADV = WORD - Adv;
SET NOT-ADV-N = WORD - Adv - N;
SET NOT-ADV-PCLE = WORD - Adv - Pcle ;
SET NOT-ADV-INDEF = WORD - Adv - Indef ;
SET NOT-ADV-PCLE-ILL = WORD - Adv - Pcle - Ill ;
SET NOT-ADV-PCLE-Refl = WORD - Adv - Pcle - Refl ;
SET NOT-ADV-PCLE-INDEF = WORD - Adv - Pcle - Indef ;
SET NOT-ADV-PCLE-NEG = WORD - Adv - Pcle - Neg ;
SET NOT-ADVL-PCLE-NEG = WORD - @ADVL - @P← - Pcle - Neg ;


LIST MO-MANge = "goas" "gokko" "gos" "gosa" "govt" "makkár" "man" "manne" "mo" "mot" "mov" "movt" ("nugo" @cvp) (v qst) ;
 
SET MO = MO-MANge - ("man" foc_ge) ; 
 
 # Introduce finite clauses.
 
LIST PLACE-ADV = "davá#bealde" "mátta#bealde" "nuortta#bealde" "oarje#bealde" "olggo#beale" ;
# There will usually be a Gen in front. 

LIST TIME-ADVL = "dalle" "diibmá" "dolin" "dovle" "duvle" "eske" "gieskat" "ikte" "ovdal" ("ovdditbeaivi" gen) ("vássánáigi" loc) ("boaresáigi" gen) "dál" "ihttin" "odne" "otne" ("boahtteáigi" loc) ("boahtteáigi" gen) ;



LIST DOPPE = "badjin" "bajil" "dakko" "dá" "dákko" "dáppe" "diekko" "dieppe" "do" "dokko" "doppe" "duo" "duokko" "duoppe" "olgun" ;
# Adverbs with a locativic form, but don´t get Loc as a tag. 

LIST DOHKO = "bajás" "deike" "diehke" "diehko" "dohko" "duohko" "lulás" "olggos" "ruoktot" "sisa" "vuovdimassii" ;
# Adverbs with a illativic form, but they don´t get Ill as a tag.


# Coordinators
# ------------
SET Foc = Foc_ge OR Foc_gen OR Foc_ges OR Foc_gis OR Foc_naj OR Foc_ba OR Foc_be OR Foc_hal OR Foc_han OR Foc_bat OR Foc_son ;

LIST NEGFOC = (neg foc_ge) ;

LIST XGO = "dego" "dugo" "nugo" "seammaládjego" "seammaláhkaigo" ;
  # Compounds
LIST SEAMMAX = "seamma#ládje" "seamma#láhkai" "seamma#láhkái" ;
  # Those combine with go
  
LIST MADE = "mađe" "mađi" ;
LIST DADE = "dađe" "dađi" ; 
  
SET CRD = COMMA OR CC OR NEGFOC OR XGO OR ("_") OR ("-") OR DADE ;
 
	# coordinators
	
LIST LCRD = @CNP ;
    # local coordinator
LIST GCRD = @CVP ;
    # global coordinator
    
SET CRD2 = (@cnp) OR COMMA OR NEGFOC OR XGO OR ("_") OR ("-") OR DADE ;
    # AFTER LCRD vs. GCRD disambiguation
    

LIST ADV-AFTER-NUM = "geardde" ;

LIST DUSSE = "áibbas" "dušše" "erenoamážit" "goitge" "man" "measta" "meastui" "oalle" "oba" "oktiibuot" "oppa" "sullii" ;

LIST GRADE-ADV = "áibbas" "beare" ("eanet" adv) "erenoamán" "erenoamáš" "hirbmat" "hui" "ila" "issoras" ("man" adv) ("mealgat" adv) "measta" "menddo" "muhtun_muddui" "nu" "oalle" "oba" ("oppa" adv) "sakka" "seammá" ("veaháš" adv) ("uhccán" adv) ("unnán" adv) "vehá" "veháš" "veahá" "veaháš" "viehka" ;

LIST BUOT = "buot" "gait" "gaitin" "gaitdivnnat" "visot" ;


LIST EASKKA = "easkka" ; 

LIST ADV-NOT-ARG = "aiddo" "ain" "aivve" "albma" "aŋkke" "álggos" "bái#fáhkka" "beanta" "beare" ;



LIST ADV-NOT-VERB = "dušše" "viimmat" ;

LIST ADV-NOT-NOUN = "easka" "várra" ;

LIST ADV-NOT-NAMES = "Ain" "Anne" "Diego" "Dieppe" "Enge" "Galle" "Haga"
"Joba" "Johan" "Liikka" "Mai" "Mannes" "Mo" "Mot" "Naba"
"Nan" "Oktan" "Sierra" "Sokka" "Villa" ;

SET ADV-NOT-OTHER-POS = ADV-NOT-VERB OR ADV-NOT-NOUN OR ADV-NOT-NAMES ;


# Sets of elements with common syntactic behaviour
# ================================================

SETS

#!! * Sets for verbs
# -----

LIST NOT-REAL-V = (actio nom) (actio gen) (actio loc) (actio com) prsprc ;

SET REAL-V = V - NOT-REAL-V ;
  #!! ** V is all readings with a V tag in them, REAL-V should
  #!! be the ones without an N tag following the V.  
  #!! The REAL-V set thus awaits a fix to the preprocess V ... N bug.
            
 
 # The set REAL is smaller than COPULAS, made for verbs with PrfPrc complements: Seammás REAL-COPULAS son dovdan iežas...
LIST REAL-COPULAS = "dáidit" "leat" "soaitit" "veadjit" ;

#!! * The set COPULAS is for predicative constructions
LIST COPULAS = "dáidit" "gártat" "leat" "soaitit" "šaddat" "orrut" "veadjit" ;
 #  "bissut" ? 
 # 'Dáidit' can appear without 'leat'.

SET NOT-COP-V = V - COPULAS ;

LIST MOD-ASP = "áigut" "bállet" "berret" "dáidit" "fertet" "galgat" "gillet" "lávet" "sáhttit" "seahtit" "soaitit" "viggat" ;

 # Verbs that never have arguments of their own - so we leave out "áigut", for ex.

LIST AUX-OR-MAIN = "áigut" "álgit" "beassat" "galgat" "háliidit" "máhttit" "nagadit" "nagodit" "ollit" "orrut" "sihtat" "veadjit";

 # These verbs can take arguments, so they do not belong in the AUX group, 
 # but they are nevertheless mapped to (@+FAUXV). 
 # Added "álgit" to the group (Lene) - Made rules for "boahtit" which  sometimes can be AUX
 # Magga (1982: 120): áigut, dáidit, deaivat, fertet, galgat, lávet, máhttit, oažžut, sáhttit, soaitit, veadjit - in some of the meanings 
 # Halvhjelpeverb: álgit, berret, dohkket, gártat, heivet, liigut, šaddat - in some of the meanings 
 
SET AUX = COPULAS OR Neg OR MOD-ASP OR AUX-OR-MAIN ;
 

SET NOT-AUX-V = V - AUX ; # This is former V-NOT-AUX
 # The set of verbs that cannot be auxiliaries. 
			  # Does not include AUX-OR-MAIN.
SET VFIN-NOT-AUX = VFIN - AUX ;

SET MAIN-V = V - COPULAS - Neg - MOD-ASP OR ("orrut") ;
 
# All active verbs with a TV tag, including AUX-OR-MAIN.

LIST V-TRANS = (v tv) (iv der_ahtti) (iv der_h) ;

 
SET TRANS-ACT-NOT-AUX-V = V-TRANS - Der_Pass - AUX ;

#!! TRANS-V is the set for verbs really taking objects


SET TRANS-V = V-TRANS - Der_Pass + REAL-V ;

#!! * NP sets defined according to their morphosyntactic features
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

LIST SG-PRON = (pron sg1) (pron sg2) (pron sg3) (pron sg) (pron pxsg1) (pron pxsg2) (pron pxsg3) ;
LIST DU-PRON = (pron du1) (pron du2) (pron du3) (pron pxdu1) (pron pxdu2) (pron pxdu3) ;
LIST PL-PRON = (pron pl1) (pron pl2) (pron pl3) (pron pl) (pron pxpl1) (pron pxpl2) (pron pxpl3) ;
LIST DU-PRON-NOTPX = (pron du1) (pron du2) (pron du3) ;


SET NORM-LOC = Loc - (south loc) ;

LIST N-SG-NOM = (n sg nom) ;

LIST PROP = (n prop) ;

SET COMMON-N = N - Prop;

SET HEAD-N = N - RCmpnd ;

SET HEAD-N-NOM = (n nom) - RCmpnd ;

SET SUBJECTHEAD = N OR A OR Pron - Refl ; # These, can be subject heads

SET NP = N OR A ; # anything that can take except numerals
SET NP-HEAD = Pron OR HEAD-N - ("buorre") ;
SET NP-HEAD-SG = SG-PRON OR (n sg) OR (a sg) - RCmpnd - Dem - ("buorre") ;
SET NP-HEAD-PL = PL-PRON OR (n pl) OR (a pl) - RCmpnd - Dem - ("buorre") ;
SET NP-HEAD-SG-NOM = SG-PRON + Nom OR (n sg nom) OR (a sg nom) - ("buorre") - RCmpnd ;
SET NP-HEAD-PL-NOM = PL-PRON + Nom OR (n pl nom) OR (a pl nom) - RCmpnd - ("buorre") ;
SET NP-HEAD-NOM = NP-HEAD-SG-NOM OR NP-HEAD-PL-NOM ;
SET NP-HEAD-ACC = (pron acc) OR (n acc) OR (a acc) - RCmpnd - (dem attr) - ("buorre") ;
SET NP-HEAD-GEN = (pron gen) OR (n gen) OR (a gen) - Der_NomAct - RCmpnd - (dem attr) - ("buorre") ;

#!! * The PRE-NP-HEAD family of sets

#!! These sets model noun phrases (NPs). The idea is to first define whatever can
#!! occur in front of the head of the NP, and thereafter negate that with the
#!! expression __WORD - premodifiers__.


SET PRE-NP-HEAD = (prop attr) OR (prop @→n) OR (a attr) OR (abbr attr) OR ("buorre") 
OR (pron pers gen) OR (n gen) OR ("buot") OR
Num OR RCmpnd OR CC OR (pron dem) OR (pron refl gen) OR (indef attr) OR 
(prfprc @→n) OR PrsPrc OR (a ord) ;
         # The strict version of items that can only be premodifiers, not parts of the predicate
         
SET PRE-NP-V = PrfPrc OR PrsPrc OR Der_NomAg OR Actio OR Der_NomAct OR (v a) OR (ind prs sg3) OR (ind prs sg1) OR (imprt du2) ;
    # to be used together with PRE-NP-HEAD before @>N is disambiguated
         
SET NP-MEMBER = PRE-NP-HEAD OR N ;

SET PRE-A-N = (pron pers gen) OR (pron pers acc) OR (pron indef) OR Num OR (a ord) OR (pron dem) OR (pron refl gen) OR (pron refl acc) ; # Acc pga av manglende disambiguering tidlig i fila

SET NOT-PRE-A-N = WORD - PRE-A-N ;

LIST PUNCT-LEFT = (punct left) ;
LIST PUNCT-RIGHT = (punct right) ;

SET PRE-APP = COMMA OR PUNCT-LEFT OR PRE-NP-HEAD ;
 # This set ist not only for what can
                            # stand in front of appositions but also
                            # postmodifiers.



#!! The set __NOT-NPMOD__ is used to find barriers between NPs.
#!! Typical usage: ... (*1 N BARRIER NPT-NPMOD) ...
#!! meaning: Scan to the first noun, ignoring anything that can be
#!! part of the noun phrase of that noun (i.e., "scan to the next NP head")

SET NOT-NPMOD = WORD - PRE-NP-HEAD OR ABBR ; 
# This is the previous NPNH (npnh) set.
# NOT-NPMOD  = "NOT-PRE-NP-HEAD"
 
SET NOT-NPMOD-ACC = NOT-NPMOD - Acc OR ABBR ; 
SET NOT-NPMOD-ACC-ADV = NOT-NPMOD - Acc - Adv OR ABBR ; 
# To be used in mappingrules, before the disambuation of Acc and Gen.                     

SET NOT-NPMODADV = WORD - PRE-NP-HEAD - Adv ; 
# NOT-NPMODADV = "NOT-PRE-NP-HEAD-OR-ADV"
SET NOT-NPMODADV-INDEF = WORD - PRE-NP-HEAD - Adv - Indef ; 
## NOT-NPMODADVI = "     ...-OR-INDEF"
SET NOT-NPMODADVII = WORD - PRE-NP-HEAD - Adv - Indef - Ill ; 
# Illative indir.obj.
SET NOT-NPMODADVIIP = WORD - PRE-NP-HEAD - Adv - Indef - Ill - Pcle ; 
# <== is this our NOT-NPMOD set?
SET NOT-NPMODCC = WORD - PRE-NP-HEAD - COMMA - LCRD ;
SET NAPP = WORD - PRE-APP ;



#!! * Miscellaneous sets
# ------------------
LIST Px = pxsg1 pxsg2 pxsg3 pxdu1 pxdu2 pxdu3 pxpl1 pxpl2 pxpl3 ;

LIST GASKAL = "gaskal" "gaskkal" "gaskii" "gaskka" "gaskkas" ;
 
 # p-positions that like coordination
 
LIST TIME-PP = "badjel" "čađa" "earret" "gaskkal" "guovddáš" "maŋŋel" "maŋŋil" "maŋŋá" "miehtá" "ovdal" ;
 

SET NUM = Num - OKTA ;

# this set does not contain ordinals, I am not sure if that is necessary.

SET NOT-NUM = WORD - Num ;

LIST MANGA = "máŋga" "galle" ;
 # Not referred to by any rule.

SET CARDINALS = Num - Ord - MANGA ;

SET NOT-CC = WORD - CC ;

SET NOT-PCLE = WORD - Pcle ;

LIST COMPAR = ("dávji" a comp) "eanet" "earalágan" "eará" "earret" "seammás" "seammalágan" "seamma_láhkái" ;
 
 # These combine with "go" Pcle, but COMPAR stands for 'comparison' rather than
 # 'comparative'.

LIST CONTRA = "muhto" ;
 # In lean muitalan, muhto dál muitalan.

LIST PROSEANTA = "proseanta" "%" ;

SET REAL-CLB = CLB - COMMA ;


SET NOT-INITIAL-CC = WORD - INITIAL - CC ;



#!! * Border sets and their complements
# ---------------------------------

SET CP = (pron interr) OR (pron rel) OR MO ;

LIST BOUNDARYSYMBOLS = "\;" ":" "-" "–" ;

# This set if for disambiguating rules after mapping @CVP and @CNP to all CS and CC readings, therefore we cannot have @CVP in the set
SET S-BOUNDARY-NOT-CVP = CP OR BOUNDARYSYMBOLS OR ("muhto") OR ("de" adv) OR (neg sup) ;
	
SET S-BOUNDARY = CP OR BOUNDARYSYMBOLS OR ("muhto") OR ("de" adv) OR (neg sup) OR (@cvp) OR ("vel" adv qst) ;
	# does not include CS, because of "go" in questions, before it is disambugated.
	# includes CP
	# this one includes @CVP, the conjunction which actually connects two sentences (each with a finite verb) to each other, 
	# and not @CNP, which coordinates internal NP-/AdvP-/AP ... coordination
	# To be used only AFTER the disambiguation of @CVP and @CNP taking place in the chapter right before "Disambiguating pronouns"


SET BOC = S-BOUNDARY OR BOS ;
SET BOC-PUNCT = BOC - ("-") - ("–") ; 
SET EOC = S-BOUNDARY OR EOS ;

SET NP-BOUNDARY = BOS OR EOS OR REAL-CLB OR VFIN OR Inf OR (actio ess) OR ConNeg OR VGen OR Sup OR PPRON-NOT-GEN OR Recipr OR Po OR Pr OR Pcle OR ("jed") OR Interj OR CS OR CP OR @CVP ;

SET APP-BOUNDARY = REAL-CLB OR VFIN OR Inf OR (actio ess) OR ConNeg OR VGen OR Sup OR Recipr OR Po OR Pr OR Pcle OR Interj OR CS OR CP OR PrfPrc - @→N ;
# A special barrier used with mapping of appositions. 

# This set contains FMAINV with @, which means that it functions for all kind of mainverbs after the verb-mapping rules 
SET SV-BOUNDARY = S-BOUNDARY OR Inf - AUX OR Sup OR FMAINV ;
 # VFIN-NOT-AUX ;
 # should be MAIN-V linked to VFIN-aux to the left. (cg-3)
# This set is ment to use in rules for disambiguating due to verbs or verbsets. It contents @.

SET SVF-BOUNDARY = S-BOUNDARY OR VFIN ;

# This set is ment to use in rules for disambiguating due to verbs or verbsets. 
# Here we search for either an S-BOUNDARY or a finite verb, either aux or main.

SET CCCOMMA = CC OR COMMA ;
	# remember that those are potential sentence boundaries, too
LIST ADVLCASE = ill loc com ess ;
LIST CASE = nom acc gen ill loc com ess ;


#!! * Syntactic sets
# --------------

LIST ALLSYNTAG = (@+fauxv) (@+fmainv) (@-fauxv) (@-fmainv) (@-fsubj→) (@-fobj) (@-f←advl) (@-fadvl→) (@→a) (@→advl) (@advl←) (@←advl) (@advl→) (@advl) (@hab→) (@←hab) (@→n) (@app) (@app-n←) (@app-pron←) (@app→pron) (@app-num←) (@app-advl←) (@voc) 
(@cnp) (@cvp) (@p←) (@→p) (@hnoun) (@interj) (@pron←) (@obj) (@obj→) (@←obj) (@opred) (@←opred) (@opred→) (@spred←obj) (@pcle) (@comp-cs←) (@n←) (@spred) (@←spred) (@spred→) (@ppred) (@num←) (@subj) (@←subj) (@subj→) (@x) ;
 

SET NON-APP = ALLSYNTAG - (@app) ;

#!! These were the set types.


	         SECTION         #

MAP:pcle (@PCLE) TARGET Pcle ;
MAP:interj (@INTERJ) TARGET Interj ;

MAP:p← (@P←) Gen (-1 Pr) ;
MAP:p←coor (@P←) Gen (-1 CRD OR COMMA LINK -1 @P←) ;
	#$ Maŋŋegiđa ja árrageasi guohtu boazu lulábeali rámaid, čohkaid ja jekkiid.


MAP:num← (@Num←) TARGET (n sg gen) (*-1 NUM + (sg nom) OR NUM + (sg acc) BARRIER NOT-A LINK NOT -1 ("jahki")) ;
MAP:n← (@N←) TARGET (sg com) (-1 Coll) ;
	#$ Mun oidnen Ándde-guovtto Ristiinnáin.

MAP:n← (@N←) TARGET (num nom) (-1 ("jahki") OR ("diibmu")) ;

MAP:→num (@→Num) TARGET DUSSE (1 Num) ;
MAP:→n (@→N) TARGET DUSSE (1 N) ;
MAP:→a (@→A) TARGET DUSSE (1 A) ;

MAP:→nAttr (@→Num) TARGET Num - (sg nom) - (Sg Acc) (1 Num) ;
MAP:→nAttr (@→Num) TARGET Attr (1 Num) ;
MAP:→nAttr (@→A) TARGET Attr (*1 A BARRIER WORD) ;
MAP:→nAttr (@→N) TARGET Attr (*1 N BARRIER Num OR A) ;
MAP:→nAttrCoor (@→N) TARGET Attr (1 CC LINK *1 N BARRIER Num OR A) ;
MAP:→nNum (@→N) TARGET Num - (sg nom) - (Sg Acc) (*1 N BARRIER NOT-A OR Num) ;

MAP:→n (@→Num) TARGET Gen - ("jahki") (1 Num) (NEGATE 0 OKTA + Nom LINK *1 (n pl loc) BARRIER NOT-NPMOD) (NEGATE 0 Gen LINK 1 CC LINK 1 Gen LINK 1 Po) ;
MAP:→n (@→Num) TARGET $$CASE (0 Dem OR OKTA OR ("buorre" a) LINK 1 $$CASE + Num) ;
MAP:→a (@→A) TARGET Gen - Sem_Time (1 A) (NEGATE 0 OKTA + Nom LINK *1 (n pl loc) BARRIER NOT-NPMOD) (NEGATE 0 Gen LINK 1 CC LINK 1 Gen LINK 1 Po) ;
MAP:→n (@→N) TARGET Gen - Sem_Time (*1 N BARRIER NOT-NPMOD OR A) (NEGATE 0 OKTA + Nom LINK *1 (n pl loc) BARRIER NOT-NPMOD) (NEGATE 0 Gen LINK 1 CC LINK 1 Gen LINK 1 Po) ;
MAP:→n (@→N) TARGET (sem_time gen) (*1 (sem_time n) BARRIER NOT-NPMOD OR A) (NEGATE 0 OKTA + Nom LINK *1 (n pl loc) BARRIER NOT-NPMOD) (NEGATE 0 Gen LINK 1 CC LINK 1 Gen LINK 1 Po) ;
MAP:→n (@→A) TARGET (sem_time gen) (1 Ord LINK 1 (sem_time n)) (NEGATE 0 OKTA + Nom LINK *1 (n pl loc) BARRIER NOT-NPMOD) (NEGATE 0 Gen LINK 1 CC LINK 1 Gen LINK 1 Po) ;
MAP:→n (@→N) TARGET $$CASE (0 Dem OR OKTA OR ("buorre" a) LINK *1 $$CASE + N BARRIER NOT-NPMOD) ;
MAP:→ntittel (@→N) TARGET (n sem_time sg nom) - Coll (1 Sem_Mal OR Sem_Fem OR Sem_Sur) ;

MAP:pron← (@Pron←) (pl acc) (-1 ("mii" pron)) ;


MAP:→pron (@→Pron) GRADE-ADV OR DUSSE OR BUOT (1 Pron) ;
MAP:vaikko (@→Pron) ("vaikko") (1 Indef) ;
MAP:vaikko (@→ADVL) ("vaikko") (1 ("man" adv)) ;

MAP:→a (@→A) TARGET GRADE-ADV (*1 A BARRIER NOT-NPMOD) ;
MAP:→adv (@→ADVL) TARGET GRADE-ADV (1 Adv) ;
MAP:→adv (@→ADVL) TARGET Loc (1 ("eret" adv)) ;
MAP:→adv (@→N) TARGET GRADE-ADV (1 N) ;


MAP:pron← (@Pron←) TARGET $$CASE (0 Refl LINK *-1 $$CASE + Pers BARRIER S-BOUNDARY OR CC) ;
MAP:pron← (@N←) TARGET $$CASE (0 Refl LINK *-1 $$CASE + (n sem_time) BARRIER S-BOUNDARY OR CC) ;
	#$ Sis lea alddiset ruhta.

MAP (@VOC) TARGET HUMAN + Nom IF (-1 BOS OR REAL-CLB) (1 COMMA LINK NEGATE *1 HUMAN + Nom BARRIER NOT-NPMOD LINK 1 COMMA OR CC) (NEGATE 2 Rel) ;
	#$ Ustiban, in mun daga dutnje vearrut.


MAP:app←n (@APP-N←) TARGET (num nom) IF (-1 (prop sem_sur nom) LINK -1 ("\ (")) (1 COMMA LINK 1 ("s") LINK 1 CARDINALS LINK 1 ("\) ")) ;
	#$ (Simonsen 1959, s. 45)

	
MAP:r286 (@APP-N←) TARGET (n nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n nom)) (1 EOS) ;
MAP:r287 (@APP-N←) TARGET (n nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n nom)) (1 COMMA LINK 1 APP-BOUNDARY) ;
	## Gulan go Bienne Káre-Ánne, skuvlla bassi, bohtá. 
MAP:r288 (@APP-Pron←) TARGET (n nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pron nom)) (1 EOS) ;
MAP:r289 (@APP-Pron←) TARGET (n nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pron nom)) (1 COMMA LINK 1 S-BOUNDARY) ;
	#$ Mon lean Will Turner, Sáppatbátti Turnera bárdni!
		
MAP:r290 (@APP-N←) TARGET (n acc) - Sem_Time IF (*-1 (n acc) BARRIER APP-BOUNDARY OR CC OR (n nom) LINK NOT *-1 COMMA BARRIER APP-BOUNDARY OR CC) (1 EOS) ;
	## Dovddatgo Bienne Káre-Ánne, skuvlla bassi? 	
MAP:r291 (@APP-N←) TARGET (n acc) - Sem_Time IF (*-1 (n acc) BARRIER APP-BOUNDARY OR CC OR (n nom) LINK NOT *-1 COMMA BARRIER APP-BOUNDARY OR CC) (1 COMMA LINK 1 S-BOUNDARY) ;	

MAP:r292 (@APP-Pron←) TARGET (n acc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR (n nom) LINK -1 (pron acc) LINK NOT *-1 COMMA BARRIER APP-BOUNDARY OR CC) (1 EOS) ;
MAP:r293 (@APP-Pron←) TARGET (n acc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR (n nom) LINK -1 (pron acc) LINK NOT *-1 COMMA BARRIER APP-BOUNDARY OR CC) (1 COMMA LINK 1 S-BOUNDARY) ;	
	#$ Oidnet go Mihkkala, min nuoramus bártni?
	#$ Mon oainnán fierpmi, su mearkka, ja dieđán ahte Spider-Man lea leamaš das.	
		

SET NOT-NP = VFIN-NOT-NEG OR ConNeg OR Inf OR Pcle OR Interj OR CS ;

MAP:voc (@VOC) TARGET Nom IF (*-1 COMMA BARRIER NOT-NP OR CC LINK *-1 (v sg2) OR (v du2) OR (v pl2) OR (pron sg2) OR (pron du2) OR (pron pl2) LINK NOT 0 ("leat")) (1 EOS) (0 HUMAN) (NEGATE 0 Sg LINK *-1 V-SG3 BARRIER REAL-V) ;
	## Vuoi du, Betsaida!
	
MAP:voc (@VOC) TARGET Nom IF (-1 Attr LINK *-1 COMMA BARRIER NOT-NP OR CC LINK *-1 (v sg2) OR (v du2) OR (v pl2) OR (pron sg2) OR (pron du2) OR (pron pl2) LINK NOT 0 ("leat")) (1 EOS) (0 HUMAN) (NEGATE 0 Sg LINK *-1 V-SG3 BARRIER REAL-V) ;
	
	
MAP:voc (@VOC) TARGET (n nom) IF (*-1 COMMA BARRIER NP-BOUNDARY LINK *-1 ("boahtin" nom) BARRIER REAL-V OR S-BOUNDARY LINK -1 ("bures")) (1 EOC) ;
	## Bures boahtin Čáhppes Bearralii, Miss Turner!	

MAP:voc (@VOC) TARGET Nom IF (-1 COMMA) (0 Pers) (0 Sg2 OR Du2 Or Pl2) (*1 Nom BARRIER NOT-NPMOD LINK 1 EOS) ;
	## Gáidet eret mu luhtte, dii verrošeaddjit! 

MAP:voc (@VOC) TARGET (n nom) IF (-2 BOS) (-1 (imprt sg2)) (NEGATE -1 Adv OR Qst) (1 EOS) ;
	## Gula eadni!

MAP:voc (@VOC) TARGET (n nom) IF (-3 BOS) (-2 (imprt sg2) OR (sg2 qst)) (NEGATE -2 Nom) (-1 COMMA) (1 COMMA) ;
	## Buvttes, Máhtte, goikemuoraid!

MAP:voc (@VOC) TARGET (n nom) IF (-4 BOS) (-3 (v sg2)) (-2 go) (-1 COMMA) (1 COMMA) ;
	## It go, bártnážan, boađáše fargga ruoktot?


MAP:r294 (@APP-N←) TARGET (n loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR ADVLCASE LINK -1 (n loc)) (1 EOS) ;	
MAP:r295 (@APP-N←) TARGET (n loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR ADVLCASE LINK -1 (n loc)) (1 COMMA LINK 1 S-BOUNDARY OR Adv) ;	

MAP:r296 (@APP-Pron←) TARGET (n loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR ADVLCASE LINK -1 (pron loc)) (1 EOS) ;	
MAP:r297 (@APP-Pron←) TARGET (n loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC OR ADVLCASE LINK -1 (pron loc)) (1 COMMA LINK 1 S-BOUNDARY OR Adv) ;	
	#$ Ánde orru Oslos, Norgga oaivegávpogis.	

MAP:r298 (@APP-N←) TARGET (n ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n ill)) (1 EOS) ;
MAP:r299 (@APP-N←) TARGET (n ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n ill)) (1 COMMA LINK 1 S-BOUNDARY) ;	
	
MAP:r300 (@APP-Pron←) TARGET (n ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pers ill)) (1 EOC OR COMMA) ;		
#MAP:r301 (@APP-Pron<) TARGET (N Ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (Pers Ill))(1 COMMA LINK 1 S-BOUNDARY) ;			
	#$ Dan mun muitalan dušše dutnje, mu buoremus olbmái.

MAP:r302 (@APP-N←) TARGET (n ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n ill) LINK *-1 BOS BARRIER APP-BOUNDARY) (1 COMMA) ;	
MAP:r303 (@APP-Pron←) TARGET (n ill) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pron ill) LINK *-1 BOS BARRIER APP-BOUNDARY) (1 COMMA) ;	
	#$ Dutnje, mu buori ustibii, mun muitalan buot.
	
MAP:r304 (@APP-N←) TARGET (n com) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n com)) (1 EOS) ;	
MAP:r305 (@APP-N←) TARGET (n com) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n com)) (1 COMMA LINK 1 S-BOUNDARY OR Adv) ;	
	#$ Mun hupmen Máhte-Iŋggáin, Niillas-Máhte eamidiin.

MAP:r306 (@APP-Pron←) TARGET (n com) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pron com)) (1 EOS) ;				
MAP:r307 (@APP-Pron←) TARGET (n com) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pron com)) (1 COMMA LINK 1 S-BOUNDARY OR Adv) ;									

MAP:r308 (@APP-N←) TARGET (n nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n nom) LINK *-1 BOS BARRIER APP-BOUNDARY) (1 COMMA LINK 1 VFIN) ;
MAP:r309 (@APP-Pron←) TARGET (n nom) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pron nom) LINK *-1 BOS BARRIER APP-BOUNDARY) (1 COMMA LINK 1 VFIN) ;
	#$ Will Turner, Sáppatbátti Turnera bárdni, lea boahtán.
	
MAP:r310 (@APP-N←) TARGET (n loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n loc) LINK *-1 BOS BARRIER APP-BOUNDARY) (1 COMMA LINK 1 VFIN) ;		
MAP:r311 (@APP-Pron←) TARGET (n loc) IF (*-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pron loc) LINK *-1 BOS BARRIER APP-BOUNDARY) (1 COMMA LINK 1 VFIN) ;		
	#$ Romssas, Davvi-Norgga stuorimus gávpogis, leat vaikko man ollu studeanttat.

MAP:r312 (@APP-N←) TARGET (n nom) IF (-1 (n gen) OR (pers gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (n gen) OR (pers gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n nom)) (1 EOS) ;
MAP:r313 (@APP-N←) TARGET (n nom) IF (-1 (n gen) OR (pers gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (n gen) OR (pers gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (n nom)) (1 COMMA LINK 1 S-BOUNDARY) ;

MAP:r314 (@APP-Pron←) TARGET (n nom) IF (-1 (n gen) OR (pers gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (n gen) OR (pers gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pron nom)) (1 EOS) ;
MAP:r315 (@APP-Pron←) TARGET (n nom) IF (-1 (n gen) OR (pers gen) LINK *-1 CC BARRIER APP-BOUNDARY LINK -1 (n gen) OR (pers gen) LINK *-1 COMMA BARRIER APP-BOUNDARY OR CC LINK -1 (pron nom)) (1 COMMA LINK 1 S-BOUNDARY) ;


MAP:r316 (@APP-N←) TARGET (n nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (n nom)) (*1 EOS BARRIER APP-BOUNDARY) ;
MAP:r317 (@APP-Pron←) TARGET (n nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (pron nom)) (*1 EOS BARRIER APP-BOUNDARY) ;	
	#$ Návetgoađis ledje ealut, nugo sávzzat, gáiccat ja gusat. 
	
MAP:r318 (@APP-N←) TARGET (n nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (n nom) LINK *-1 BOS BARRIER APP-BOUNDARY) (*1 COMMA BARRIER APP-BOUNDARY LINK 1 VFIN) ;
MAP:r319 (@APP-Pron←) TARGET (n nom) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (pron nom) LINK *-1 BOS BARRIER APP-BOUNDARY) (*1 COMMA BARRIER APP-BOUNDARY LINK 1 VFIN) ;
	#$ Mu vánhemat, sihke áhčči ja eadni, leaba jápmán. 
 
MAP:r320 (@APP-N←) TARGET (n acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (n acc) LINK *-1 BOS BARRIER APP-BOUNDARY) (*1 COMMA BARRIER APP-BOUNDARY) ;
MAP:r321 (@APP-Pron←) TARGET (n acc) IF (*-1 ("nugo") OR ("sihke") BARRIER APP-BOUNDARY LINK -1 COMMA LINK -1 (pron acc) LINK *-1 BOS BARRIER APP-BOUNDARY) (*1 COMMA BARRIER APP-BOUNDARY) ;
	#$ Muhtun sámi biktasiid, nugo gápmagiid ja vuoddagiid, sii geavahedje guhkit, gitta 1960-logu rádjai.


MAP:←spred (@←SPRED) TARGET Nom - OKTA ((*-1 COPULAS + FMAINV BARRIER NOT-NPMODADV LINK *-1 @HAB→ OR DOPPE OR (n loc) OR Ill OR (sem_time adv) OR (sem_time gen) OR TIME-ADVL OR Po OR Adv BARRIER SV-BOUNDARY) OR (-1 Ill OR @Pron← LINK *-1 COPULAS + FMAINV BARRIER NOT-NPMODADV LINK *-1 @HAB→ OR DOPPE OR (sem_plc loc) OR Ill OR Sem_Time OR TIME-ADVL OR Po BARRIER SV-BOUNDARY)) ;
	#$ Dá lea dutnje biebmu.
	#$ Juohke guovllu gávttis lea sierralágan holbi.

MAP:←spredQst (@←SPRED) TARGET Nom ((*-1 @←HAB OR DOPPE OR (sem_plc loc) OR (sem_time adv) OR (sem_time gen) OR TIME-ADVL OR Po BARRIER NOT-NPMODADV LINK -1 Qst LINK -1 COPULAS) OR (*-1 Qst BARRIER NOT-NPMOD LINK -1 COPULAS LINK NEGATE *1 Nom LINK *1 Nom BARRIER NOT-A-ADV) OR (*-1 COPULAS BARRIER NOT-NPMOD LINK -1 BOS)) (NEGATE *1 Nom BARRIER NOT-NPMOD OR CC OR COMMA) ;
	#$ Lea go dis ruhta?

MAP:←spredSg (@←SPRED) TARGET (sg nom) ((*-1 COPULAS BARRIER NOT-NPMODADV LINK *-1 (sg nom) OR SGPRON + Nom OR (indef nom) BARRIER SV-BOUNDARY) OR (0 Coll OR Sem_Group LINK *-1 COPULAS BARRIER NOT-NPMODADV LINK *-1 (pl nom) OR PLPRON + Nom OR (indef nom) BARRIER SV-BOUNDARY)) ;
MAP:←spredPl (@←SPRED) TARGET (pl nom) ((*-1 COPULAS BARRIER NOT-NPMODADV LINK *-1 (pl nom) OR PLPRON + Nom OR DUPRON + Nom BARRIER NOT-ADV-PCLE) OR (*-1 COPULAS BARRIER NOT-NPMODADV LINK -1 Nom LINK *-1 CC BARRIER NOT-NPMOD LINK -1 Nom) OR (*-1 COPULAS BARRIER NOT-NPMODADV LINK *-1 FAUXV BARRIER NOT-ADV-PCLE LINK *-1 (pl nom) OR PLPRON + Nom OR DUPRON + Nom BARRIER NOT-ADV-PCLE)) ;
MAP:←spredEss (@←SPRED) TARGET (n ess) IF (*-1 COPULAS BARRIER S-BOUNDARY OR Ess - ("buorre" ess) OR Nom LINK 0 FMAINV LINK *-1 NP-HEAD-NOM BARRIER SV-BOUNDARY OR @HAB→) ;

MAP:HABspredSg→ (@SPRED→) TARGET Nom (1 @HAB→ LINK 1 COPULAS) ;
	#$ Mii dus lea?

MAP:spredSg→ (@SPRED→) TARGET ("mii" sg nom) (*1 (sg nom) BARRIER NOT-NPMOD LINK 1 COPULAS) ;


MAP:spredSg→ (@SPRED→) TARGET (sg nom) (1 (sg nom) OR SGPRON + Nom OR (indef nom) LINK 1 COPULAS) ;
MAP:spredSg→ (@SPRED→) TARGET (a sg nom) (*1 COPULAS + FMAINV BARRIER SV-BOUNDARY OR COMMA OR CC LINK NOT 1 A) ;
MAP:spredPl→ (@SPRED→) TARGET (pl nom) (1 (pl nom) OR PLPRON + Nom OR DUPRON + Nom LINK 1 COPULAS) ;

MAP:←spredCoor (@←SPRED) TARGET Nom - Rel (*-1 CC OR COMMA BARRIER NOT-NPMOD LINK -1 @←SPRED) (NEGATE 1 VFIN) ;


LIST PERS-TAGS = sg1 sg2 sg3 du1 du2 du3 pl1 pl2 p3 ;

MAP:subj→Pers (@SUBJ→) TARGET $$PERS-TAGS + Nom IF (*1 $$PERS-TAGS + VFIN BARRIER NOT-ADV-PCLE) ;
MAP:subj→Pers (@SUBJ→) TARGET (sg1 nom) (-1 CC LINK *2 (v pl1) BARRIER NOT-ADV-PCLE) ;
MAP:←subjPers (@←SUBJ) TARGET $$PERS-TAGS + Nom IF (*-1 $$PERS-TAGS + VFIN BARRIER NOT-ADV-PCLE) ;
	#$ Mii du namma lea?
	#$ Gii ..
MAP:subj→Sg (@SUBJ→) TARGET (nom sg) OR (sg3 nom) OR (indef nom) IF (*1 VFIN + Sg3 BARRIER REAL-V OR S-BOUNDARY) (NEGATE *-1 VFIN + Sg3 BARRIER NOT-ADV-PCLE) ;
MAP:subj→Du (@SUBJ→) TARGET (coll nom) IF (*1 VFIN + Du3 BARRIER REAL-V OR S-BOUNDARY) ;
MAP:subj→Pl (@SUBJ→) TARGET (nom pl) OR (pl3 nom) OR (sem_group nom) OR (coll nom) IF (*1 VFIN + Pl3 BARRIER REAL-V OR S-BOUNDARY) ;
MAP:subj→Sg (@SUBJ→) TARGET (nom sg) IF (*1 VFIN + Sg3 BARRIER REAL-V OR S-BOUNDARY) ;

MAP:←subjSg (@←SUBJ) TARGET (nom sg) IF (*-1 VFIN + Sg3 BARRIER REAL-V OR S-BOUNDARY) ;
MAP:←subjPl (@←SUBJ) TARGET (nom pl) OR (sem_group nom) OR (coll nom) IF (*-1 VFIN + Pl3 BARRIER NOT-NPMOD) ;

MAP:subj→Coor1 (@SUBJ→) TARGET Nom IF (1 CC LINK *1 Nom BARRIER NOT-NPMOD LINK *1 VFIN + Pl3 OR VFIN + Du3 BARRIER NOT-ADV-PCLE) ;
MAP:subj→Coor2 (@SUBJ→) TARGET Nom (*-1 CC BARRIER NOT-NPMOD LINK -1 @SUBJ→) (*1 VFIN + Pl3 OR VFIN + Du3 BARRIER NOT-ADV-PCLE) ;
MAP:←subjCoor1 (@←SUBJ) TARGET Nom IF (1 CC LINK *1 Nom BARRIER NOT-NPMOD) (*-1 VFIN + Pl3 OR VFIN + Du3 BARRIER NOT-ADV-PCLE LINK NOT *-1 Nom BARRIER NOT-ADV-PCLE) ;
MAP:←subjCoor2 (@←SUBJ) TARGET Nom (*-1 CC BARRIER NOT-NPMOD LINK -1 @←SUBJ LINK *-1 VFIN + Pl3 OR VFIN + Du3 BARRIER NOT-ADV-PCLE LINK NOT *-1 Nom BARRIER NOT-ADV-PCLE) ;
MAP:subj→Num (@SUBJ→) TARGET (num nom) (*1 (n sg gen) BARRIER NOT-A LINK *1 VFIN + Pl3 BARRIER NOT-ADV-PCLE) ;
MAP:subj→Coor3 (@SUBJ→) TARGET Nom IF (1 CC OR COMMA LINK *1 @SUBJ→ BARRIER NOT-NPMOD) ;
MAP:subj→Coor4 (@SUBJ→) TARGET Nom IF (1 CC OR COMMA LINK *1 @SUBJ→ BARRIER NOT-NPMOD) ;


MAP:→cc (@→CC) TARGET ("sihke") (*1 ("ja") OR ("ahte")) ;

MAP:→P (@→P) Gen (1 Po) ;
MAP:→Pcoor (@→P) Gen (1 CC LINK *1 @→P BARRIER NOT-NPMOD) ;


LIST ADVL = adv ill com loc po pr ;

SET MOD-ADV = DUSSE OR ("njuolga") OR ("njuolgga") OR EASKKA OR ("gitta") ;

MAP:f←advl (@-F←ADVL) TARGET ADVL - MO OR (sem_time gen) OR (sem_route gen) (*-1 (v @←OBJ) BARRIER SV-BOUNDARY) ;

MAP:-fobj→ (@-FOBJ→) TARGET Acc (1 (tv vabess) OR (tv actio loc) OR (tv prfprc) LINK 0 SYN-V) ; 

MAP:advl→ (@ADVL→) TARGET ADVL + S-BOUNDARY (*1 FMAINV BARRIER S-BOUNDARY) ;

MAP:←advl (@←ADVL) TARGET ADVL - MO - Rel - MOD-ADV OR (sem_time gen) OR (sem_route gen) (*-1 FMAINV BARRIER SV-BOUNDARY) (NEGATE -1 COMMA LINK *1 FMAINV BARRIER S-BOUNDARY) ;
MAP:advl→ (@ADVL→) TARGET ADVL OR (sem_time gen) OR (sem_route gen) (*1 FMAINV BARRIER SV-BOUNDARY) ;

MAP:←advl (@←ADVL) TARGET Po OR Pr (*-1 FMAINV BARRIER SV-BOUNDARY) ;
MAP:advl→ (@ADVL→) TARGET Po OR Pr (*1 FMAINV BARRIER SV-BOUNDARY) ;


#MAP:<advl (@<ADVL) TARGET ADVL (*-1 FMAINV BARRIER SV-BOUNDARY) ;
#MAP:advl> (@ADVL>) TARGET ADVL (*1 FMAINV BARRIER SV-BOUNDARY) ;

MAP:←advl (@←ADVL) TARGET (n gen) (*-1 FMAINV BARRIER SV-BOUNDARY) (NOT *1 N BARRIER NOT-A) (NOT 1 Po) ;
MAP:advl→ (@ADVL→) TARGET (n gen) (*1 FMAINV BARRIER SV-BOUNDARY OR Po) (NOT *1 N BARRIER NOT-A) ;
MAP:advl→ (@ADVL→) TARGET Ess (*1 FMAINV BARRIER SV-BOUNDARY LINK NOT *1 Nom BARRIER NOT-NPMOD) (NEGATE *-1 REAL-V BARRIER S-BOUNDARY) ;
	#$ Čuoikan ...

MAP:advl→ (@←ADVL) TARGET (wthr ess) OR (sem_time ess) (*-1 FMAINV BARRIER SV-BOUNDARY) ;


MAP:Acc←advl (@←ADVL) TARGET (sem_time acc) OR ("gaska" acc) (*-1 FMAINV BARRIER SV-BOUNDARY) ;
MAP:Accadvl→ (@ADVL→) TARGET (sem_time acc) OR ("gaska" acc) (*1 FMAINV BARRIER SV-BOUNDARY) ;

MAP:gitta→adv (@→ADVL) TARGET ("gitta" adv) (NOT *-1 ("váldit") OR ("doallat") OR ("čatnat") OR ("bidjat") OR ("leat") OR ("mannat") BARRIER SV-BOUNDARY) (*1 DOHKO OR DOPPE OR Loc OR Ill OR Sem_Time OR Po BARRIER NOT-NPMOD) ;
MAP (@→ADVL) TARGET Adv IF (0 MOD-ADV) (*1 @ADVL BARRIER NOT-NPMOD) ;

MAP:←advl (@←ADVL) TARGET Adv (*-1 FMAINV BARRIER SV-BOUNDARY) (NEGATE -1 COMMA LINK *1 FMAINV BARRIER S-BOUNDARY) ;

MAP:-fsubj→ (@-FSUBJ→) TARGET HUMAN + Acc (1 (v @←OBJ)) ; 
MAP:-f←obj (@-F←OBJ) TARGET Acc (*-1 (v tv) + SYN-V BARRIER REAL-V OR S-BOUNDARY) ; 
	#$ Máret muitalii Máhte oaidnán guovžža.
	#$ Gurssa ulbmil lea oahppat goarrut Ivgu gávtti.


MAP:←obj (@←OBJ) TARGET Acc - Rel (*-1 FMAINV BARRIER SV-BOUNDARY) (NEGATE -1 COMMA LINK *2 TRANS-V + FMAINV BARRIER SV-BOUNDARY) ;



MAP:obj→ (@OBJ→) TARGET Acc (*1 FMAINV BARRIER SV-BOUNDARY) ;

MAP:←spredEss (@←SPRED) TARGET (n ess) OR (a ess) IF (*-1 FMAINV + IV OR ("bargat") + FMAINV BARRIER SV-BOUNDARY) ;
MAP:←opredEss (@←OPRED) TARGET (n ess) OR (a ess) IF (*-1 FMAINV + TRANS-V BARRIER SV-BOUNDARY) ;
MAP:spred→Ess (@SPRED→) TARGET (n ess) OR (a ess) IF (*1 FMAINV + IV OR ("bargat") + FMAINV BARRIER SV-BOUNDARY) ;
MAP:opred→Ess (@OPRED→) TARGET (n ess) OR (a ess) IF (*1 FMAINV + TRANS-V BARRIER SV-BOUNDARY) ;
#MAP:<spredEss (@<SPRED) TARGET (A Ess) IF (*-1 FMAINV BARRIER SV-BOUNDARY);
#MAP:spred>Ess (@SPRED>) TARGET (A Ess) IF (*1 FMAINV BARRIER SV-BOUNDARY);




	#$ Báhpaeamit, Margrethe Wiig, gii lei gasku giellamoivvi, ráhkadii iežas sárgumiiguin sámegiela Áppesa, mii lei stuorra ávkin sámegiela oahpahusas.

AFTER-SECTIONS

#For MT:

SUBSTITUTE (sem_act) (*) TARGET (sem_act) ;
SUBSTITUTE (sem_ani) (*) TARGET (sem_ani) ;
SUBSTITUTE (sem_body) (*) TARGET (sem_body) ;
SUBSTITUTE (sem_build) (*) TARGET (sem_build) ;
SUBSTITUTE (sem_clth) (*) TARGET (sem_clth) ;
SUBSTITUTE (sem_ctain) (*) TARGET (sem_ctain) ;
SUBSTITUTE (sem_date) (*) TARGET (sem_date) ;
SUBSTITUTE (sem_edu) (*) TARGET (sem_edu) ;
SUBSTITUTE (sem_event) (*) TARGET (sem_event) ;
SUBSTITUTE (sem_fem) (*) TARGET (sem_fem) ;
SUBSTITUTE (sem_food) (*) TARGET (sem_food) ;
SUBSTITUTE (sem_group) (*) TARGET (sem_group) ;
SUBSTITUTE (sem_hum) (*) TARGET (sem_hum) ;
SUBSTITUTE (sem_lang) (*) TARGET (sem_lang) ;
SUBSTITUTE (sem_mal) (*) TARGET (sem_mal) ;
SUBSTITUTE (sem_mat) (*) TARGET (sem_mat) ;
SUBSTITUTE (sem_measr) (*) TARGET (sem_measr) ;
SUBSTITUTE (sem_money) (*) TARGET (sem_money) ;
SUBSTITUTE (sem_obj) (*) TARGET (sem_obj) ;
SUBSTITUTE (sem_org) (*) TARGET (sem_org) ;
SUBSTITUTE (sem_plant) (*) TARGET (sem_plant) ;
SUBSTITUTE (sem_plc) (*) TARGET (sem_plc) ;
SUBSTITUTE (sem_sur) (*) TARGET (sem_sur) ;
SUBSTITUTE (sem_route) (*) TARGET (sem_route) ;
SUBSTITUTE (sem_semcon) (*) TARGET (sem_semcon) ;
SUBSTITUTE (sem_txt) (*) TARGET (sem_txt) ;
SUBSTITUTE (sem_time) (*) TARGET (sem_time) ;
SUBSTITUTE (sem_txt) (*) TARGET (sem_txt) ;
SUBSTITUTE (sem_veh) (*) TARGET (sem_veh) ;
SUBSTITUTE (sem_wpn) (*) TARGET (sem_wpn) ;
SUBSTITUTE (sem_wthr) (*) TARGET (sem_wthr) ;
SUBSTITUTE (←vdic→) (*) TARGET (←vdic→) ;


SUBSTITUTE SUB:-1 (sem_act) (*) TARGET (sem_act) ;
SUBSTITUTE SUB:-1 (sem_ani) (*) TARGET (sem_ani) ;
SUBSTITUTE SUB:-1 (sem_body) (*) TARGET (sem_body) ;
SUBSTITUTE SUB:-1 (sem_build) (*) TARGET (sem_build) ;
SUBSTITUTE SUB:-1 (sem_clth) (*) TARGET (sem_clth) ;
SUBSTITUTE SUB:-1 (sem_ctain) (*) TARGET (sem_ctain) ;
SUBSTITUTE SUB:-1 (sem_date) (*) TARGET (sem_date) ;
SUBSTITUTE SUB:-1 (sem_edu) (*) TARGET (sem_edu) ;
SUBSTITUTE SUB:-1 (sem_event) (*) TARGET (sem_event) ;
SUBSTITUTE SUB:-1 (sem_fem) (*) TARGET (sem_fem) ;
SUBSTITUTE SUB:-1 (sem_food) (*) TARGET (sem_food) ;
SUBSTITUTE SUB:-1 (sem_group) (*) TARGET (sem_group) ;
SUBSTITUTE SUB:-1 (sem_hum) (*) TARGET (sem_hum) ;
SUBSTITUTE SUB:-1 (sem_lang) (*) TARGET (sem_lang) ;
SUBSTITUTE SUB:-1 (sem_mal) (*) TARGET (sem_mal) ;
SUBSTITUTE SUB:-1 (sem_mat) (*) TARGET (sem_mat) ;
SUBSTITUTE SUB:-1 (sem_measr) (*) TARGET (sem_measr) ;
SUBSTITUTE SUB:-1 (sem_money) (*) TARGET (sem_money) ;
SUBSTITUTE SUB:-1 (sem_obj) (*) TARGET (sem_obj) ;
SUBSTITUTE SUB:-1 (sem_org) (*) TARGET (sem_org) ;
SUBSTITUTE SUB:-1 (sem_plant) (*) TARGET (sem_plant) ;
SUBSTITUTE SUB:-1 (sem_plc) (*) TARGET (sem_plc) ;
SUBSTITUTE SUB:-1 (sem_sur) (*) TARGET (sem_sur) ;
SUBSTITUTE SUB:-1 (sem_route) (*) TARGET (sem_route) ;
SUBSTITUTE SUB:-1 (sem_semcon) (*) TARGET (sem_semcon) ;
SUBSTITUTE SUB:-1 (sem_txt) (*) TARGET (sem_txt) ;
SUBSTITUTE SUB:-1 (sem_time) (*) TARGET (sem_time) ;
SUBSTITUTE SUB:-1 (sem_txt) (*) TARGET (sem_txt) ;
SUBSTITUTE SUB:-1 (sem_veh) (*) TARGET (sem_veh) ;
SUBSTITUTE SUB:-1 (sem_wpn) (*) TARGET (sem_wpn) ;
SUBSTITUTE SUB:-1 (sem_wthr) (*) TARGET (sem_wthr) ;
SUBSTITUTE SUB:-1 (←vdic→) (*) TARGET (←vdic→) ;

	#=====#
      END #
	#=====#
